import "array"
import "map"
import "ast"
import "lex"
import "types"
import "module"
import "lita"
import "mem"
import "phase_result"
import "libc"

@asStr
public enum SymbolKind {
    TYPE,
    VAR,
    CONST,
    FUNC,
}

@asStr
public enum SymbolState {
    UNRESOLVED = 0,
    RESOLVING,
    RESOLVED,
    ERROR
}

public enum SymbolFlags {
    IS_LOCAL                = (1<<1),
    IS_FOREIGN              = (1<<2),
    IS_CONSTANT             = (1<<3),
    IS_USING                = (1<<4),
    IS_TYPE                 = (1<<5),
    IS_INCOMPLETE           = (1<<6),
    IS_GENERIC_TEMPLATE     = (1<<7),
    IS_BUILTIN              = (1<<8),
    IS_FROM_GENERIC_TEMPLATE= (1<<9),
    IS_IMPORTED             = (1<<10),
    IS_PUBLIC               = (1<<11),
    IS_EMITTED              = (1<<12),
    IS_TEST                 = (1<<13),
}

public const MAX_SYMBOL_NAME = 256;

public struct Symbol {
    kind: SymbolKind
    name: [MAX_SYMBOL_NAME]char
    state: SymbolState
    decl: *Decl
    type: *TypeInfo
    //usingParent: *TypeInfo
    usingParent: *Symbol
    declared: *Module
    flags: i32

    // TODO: put in struct
    genericCallsiteModule: *Module
    genericArgs: Array<*TypeInfo>
    genericParams: Array<GenericParam>
}

public func (this: *Symbol) isGenericCapable() : bool {
    return this.flags & SymbolFlags.IS_GENERIC_TEMPLATE ||
           this.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE
}

public enum ScopeKind {
    MODULE,
    FUNC,
}

public struct ProgramSymbols {
    values: Array<*Symbol>
    symbolTypes: Array<*Symbol>
    symbolFuncs: Array<*Symbol>
    mainEntry: *Symbol
}

public struct Scope {
    kind: ScopeKind
    allocator: *const Allocator
    result: *PhaseResult
    parent: *Scope
    symbols: using Map<*const char, *Symbol>

    module: *Module // TEMP
}

public func NewScope(kind: ScopeKind, parent: *Scope, result: *PhaseResult, allocator: *const Allocator) : *Scope {
    var scope = new<Scope>(allocator)
    scope.init(kind, parent, result, allocator)
    return scope
}

public func (scope: *Scope) init(kind: ScopeKind,
                                 parent: *Scope,
                                 result: *PhaseResult,
                                 allocator: *const Allocator) {
    scope.kind = kind
    scope.allocator = allocator
    scope.parent = parent
    scope.result = result
    scope.symbols = StrMap<*Symbol>(null, 16, allocator)
}


public func (s: *Scope) lookup(name: *const char) : *Symbol {
    var sym = s.symbols.get(name)
    if(sym) {
        return sym
    }

    if(!s.parent) {
        return null
    }

    return s.parent.lookup(name)
}

public func (s: *Scope) lookupByToken(name: Token) : *Symbol {
    if(name.type != TokenType.IDENTIFIER) {
        return null
    }

    var buf:[MAX_SYMBOL_NAME]char
    name.str.copyTo(buf, MAX_SYMBOL_NAME)
    return s.lookup(buf)
}

public func (this: *Scope) importSymbol(name:[MAX_SYMBOL_NAME]const char,
                                        symbol: *Symbol) {

    if(this.symbols.contains(name) && !symbol.decl.hasNote("generated")) {
        this.result.addError(symbol.decl.startPos, "can't import symbol '%s' because it is already defined", name)
        return;
    }

    this.symbols.put(name, symbol)
}

public func (this: *Scope) addSymbol(name:[MAX_SYMBOL_NAME]const char,
                                     module: *Module,
                                     decl: *Decl,
                                     flags: i32) : *Symbol {

    if(this.symbols.contains(name) && !decl.hasNote("generated")) {
        this.result.addError(decl.startPos, "symbol '%s' already defined", name)
        return null;
    }

    var isNewType = (decl.kind == StmtKind.FUNC_DECL   ||
                     decl.kind == StmtKind.STRUCT_DECL ||
                     decl.kind == StmtKind.UNION_DECL  ||
                     decl.kind == StmtKind.TYPEDEF_DECL||
                     decl.kind == StmtKind.ENUM_DECL)

    if(this.kind == ScopeKind.FUNC) {
        if(!isNewType) {
            flags |= SymbolFlags.IS_LOCAL
        }
    }

    if(decl.hasNote("foreign")) {
        flags |= SymbolFlags.IS_FOREIGN
    }

    if(decl.attributes.isPublic) {
        flags |= SymbolFlags.IS_PUBLIC
    }

    if(isNewType) {
        flags |= SymbolFlags.IS_TYPE
    }

    var kind = SymbolKind.VAR
    switch(decl.kind) {
        case StmtKind.ENUM_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.TYPEDEF_DECL:
        case StmtKind.STRUCT_DECL: {
            kind = SymbolKind.TYPE
            break;
        }
        case StmtKind.FUNC_DECL: {
            kind = SymbolKind.FUNC
            if(decl.hasNote("test")) {
                flags |= SymbolFlags.IS_TEST
            }
            break;
        }
        case StmtKind.CONST_DECL: {
            kind = SymbolKind.CONST
            flags |= SymbolFlags.IS_CONSTANT
            break;
        }
        default: {
            kind = SymbolKind.VAR
            break;
        }
    }

    var sym = new<Symbol>(this.allocator)
    sym.kind = kind
    strncpy(sym.name, name, MAX_SYMBOL_NAME)
    sym.state = SymbolState.UNRESOLVED
    sym.decl = decl
    sym.type = null
    sym.declared = module
    sym.flags = flags

    decl.sym = sym

    this.symbols.put(sym.name, sym)
    return sym
}


// TEMP
public func (this: *Scope) print(header: *const char) {
    printf("Scope %s {\n", header)
    for(var i = 0; i < this.symbols.capacity; i+=1) {
        var symName = this.symbols.keys[i]
        var symbol = this.symbols.values[i]
        if(!symName || !symbol) {
            continue
        }
        printf("   '%s'\n", symName)
    }
    printf("}\n")
}