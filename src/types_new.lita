import "mem"
import "types"
import "symbols"
import "array"
import "map"
import "ast"
import "libc"


public struct TypeCache {
    allocator: *const Allocator
    constCache: Map<i64, *ConstTypeInfo>     // TODO: Fix alias generics bug - should be using Typeid
    ptrCache:   Map<i64, *PtrTypeInfo>
    arrayCache: Map<ArrayEntry, *ArrayTypeInfo>
    genericCache: Map<*const char, *TypeInfo>
}

public struct ArrayEntry {
    arrayOf: *TypeInfo
    expr: *Expr
    length: usize
}

func Hash(a: ArrayEntry) : u32 {
    var add: u32 = 3
    if(a.arrayOf) {
        add += ((a.arrayOf) as (usize) >> 7) as (u32)
    }
    add += a.length as (u32)
    return add
}

func Equals(a: ArrayEntry, b: ArrayEntry) : bool {
    if(a.arrayOf && !b.arrayOf) return false;
    if(!a.arrayOf && b.arrayOf) return false;
    if(a.arrayOf && b.arrayOf) {
        if(a.arrayOf.typeid != b.arrayOf.typeid) {
            return false
        }
    }
    return //a.expr == b.expr &&
           a.length == b.length
}

public func (this: *TypeCache) init(allocator: *const Allocator) {
    this.allocator = allocator
    // TODO: should we create our own local allocator?
    this.constCache.init(null, 1024, PtrHashFn<Typeid>, PtrEqualFn<Typeid>, allocator)
    this.ptrCache.init(null, 1024, PtrHashFn<Typeid>, PtrEqualFn<Typeid>, allocator)
    this.arrayCache.init(null, 512, Hash, Equals, allocator, ArrayEntry{.expr = null, .arrayOf = null, .length = 0})
    this.genericCache.init<*const char, *TypeInfo>(null, 128, StrHashFn, StrEqualFn, allocator);
}

public func (this: *TypeCache) newGenericParamTypeInfo(name: *const char) : *TypeInfo {
    var type = this.genericCache.get(name)
    if(!type) {
        type = new<TypeInfo>(this.allocator)
        type.kind = TypeKind.GENERIC_PARAM
        type.typeid = NextTypeId()
        type.name = name
        type.sym = null

        this.genericCache.put(name, type)
    }
    return type;
}

public func (this: *TypeCache) newFuncTypeInfo(sym: *Symbol,
                                               funcDecl: *FuncDecl) : *FuncTypeInfo {

    var type = new<FuncTypeInfo>(this.allocator)
    type.kind = TypeKind.FUNC
    type.typeid = NextTypeId()
    type.name = sym.name
    type.sym = sym
    type.decl = funcDecl
    type.returnType = null
    return type;
}

public func (this: *TypeCache) newArrayTypeInfo(arrayOf: *TypeInfo,
                                                length: usize,
                                                numOfElements: *Expr,
                                                isLengthDefined: bool) : *ArrayTypeInfo {

    var entry = ArrayEntry{.arrayOf = arrayOf, .expr = numOfElements, .length = length}
    var type = this.arrayCache.get(entry)
    if(!type || type.length != length || type.isLengthDefined != isLengthDefined) {
        type = new<ArrayTypeInfo>(this.allocator)
        type.kind = TypeKind.ARRAY
        type.typeid = NextTypeId()
        type.arrayOf = arrayOf
        type.length = length
        type.numOfElements = numOfElements
        type.isLengthDefined = isLengthDefined

        this.arrayCache.put(entry, type)
    }

    return type;
}

public func (this: *TypeCache) newFuncPtrTypeInfo(genericParams: Array<GenericParam>,
                                                  returnType: *TypeInfo,
                                                  paramDecls: Array<*TypeInfo>,
                                                  hasVarargs: bool) : *FuncPtrTypeInfo {
// TODO: implement cache
    var type = new<FuncPtrTypeInfo>(this.allocator)
    type.kind = TypeKind.FUNC_PTR
    type.typeid = NextTypeId()
    type.genericParams = genericParams
    type.returnType = returnType
    type.paramDecls = paramDecls
    type.hasVarargs = hasVarargs
    return type;
}

public func (this: *TypeCache) newAggregateTypeInfo(sym: *Symbol,
                                                    aggregateDecl: *AggregateDecl) : *AggregateTypeInfo {

    var type = new<AggregateTypeInfo>(this.allocator)
    type.kind = aggregateDecl.kind == StmtKind.STRUCT_DECL ? TypeKind.STRUCT : TypeKind.UNION
    type.typeid = NextTypeId()
    type.name = sym.name
    type.decl = aggregateDecl
    type.sym = sym
    return type
}

public func (this: *TypeCache) newEnumTypeInfo(sym: *Symbol,
                                               enumDecl: *EnumDecl) : *EnumTypeInfo {

    var type = new<EnumTypeInfo>(this.allocator)
    type.kind = TypeKind.ENUM
    type.typeid = NextTypeId()
    type.name = sym.name
    type.decl = enumDecl
    type.sym = sym
    return type
}

public func (this: *TypeCache) newForeignTypeInfo(sym: *Symbol) : *TypeInfo {

    var type = new<TypeInfo>(this.allocator)
    type.kind = TypeKind.I64 // TODO: Create a foreign primitive type?
    type.typeid = NextTypeId()
    type.name = sym.name
    type.sym = sym
    return type
}

public func (this: *TypeCache) newConstTypeInfo(base: *TypeInfo) : *ConstTypeInfo {
    // can't have const const
    if(base.kind == TypeKind.CONST) {
        return base as (*ConstTypeInfo)
    }

    var type = this.constCache.get(base.typeid)
    if(!type) {
        type = new<ConstTypeInfo>(this.allocator)
        type.kind = TypeKind.CONST
        type.typeid = NextTypeId()
        type.constOf = base

        this.constCache.put(base.typeid, type)
    }

    return type
}

public func (this: *TypeCache) newPtrTypeInfo(base: *TypeInfo) : *PtrTypeInfo {
    var type = this.ptrCache.get(base.typeid)
    if(!type) {
        type = new<PtrTypeInfo>(this.allocator)
        type.kind = TypeKind.PTR
        type.typeid = NextTypeId()
        type.ptrOf = base

        this.ptrCache.put(base.typeid, type)
    }

    return type
}

public func (this: *TypeCache) typeDecay(type: *TypeInfo) : *TypeInfo {
    if(!type) return null;

    switch(type.kind) {
        case TypeKind.ARRAY: {
            var arrayInfo = type as (*ArrayTypeInfo)
            return this.newPtrTypeInfo(this.typeDecay(arrayInfo.arrayOf)) as (*TypeInfo)
        }
        case TypeKind.FUNC: {
            var funcInfo = type as (*FuncTypeInfo)
            return funcInfo.asPtr(this) as (*TypeInfo)
        }
        default: {
            return type
        }
    }
}