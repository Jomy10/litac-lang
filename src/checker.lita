/**
    Type Checker
*/
import "types"
import "types_new"
import "symbols"
import "phase_result"
import "module"
import "ast"
import "lex"
import "state"
import "map"
import "string_buffer"
import "array"
import "assert"

import "ast_print"
import "libc"

import "checker_decl"
import "checker_expr"


public struct TypeChecker {
    lita: using *Lita
    
    prev: *Module
    current: *Module

    currentScope: *Scope            // for function scopes
    currentFuncDecl: *FuncTypeInfo

    pendingValues: Array<*Symbol>
    symbolTypes: Array<*Symbol>     // all types from all modules
    symbolFuncs: Array<*Symbol>

    randomNameIndex: u32
}

public func (this: *TypeChecker) init(lita: *Lita) {
    this.lita = lita
    this.prev = null
    this.current = null
    this.currentScope = null
    this.pendingValues.init(64, lita.allocator)
    this.symbolTypes.init(64, lita.allocator)
    this.symbolFuncs.init(32, lita.allocator)
}

public func (this: *TypeChecker) typeCheck(root: *Module) {
    if(root.flags & ModuleFlags.TYPE_CHECKED) {
        return;
    }
    root.flags |= ModuleFlags.TYPE_CHECKED
    this.currentScope = &root.symbols

    this.createModuleSymbols(root)
    this.resolveSymbols()
}

func (this: *TypeChecker) checkCastability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.canCastTo(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be casted to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkAssignability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isAssignable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be assigned to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkDeclarability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isDeclarable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be assigned to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkTypeCompatibility(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isAssignable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' is not of type '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }
    return true
}

func (this: *TypeChecker) createModuleSymbols(module: *Module) {
    if(!module.ast) {
        return;
    }

    this.enterModule(module)
    defer this.leaveModule()

    for(var i = 0; i < module.ast.declarations.size(); i += 1) {
        var decl = module.ast.declarations.get(i)
        this.createDeclSymbol(decl)
    }

    for(var i = 0; i < module.ast.imports.size(); i += 1) {
        var imp = module.ast.imports.get(i)
        this.createImportSymbols(imp)
    }
}

func (this: *TypeChecker) enterModule(module: *Module) {
    this.prev = this.current
    this.current = module
}

func (this: *TypeChecker) leaveModule() {
    if(this.prev) {
        this.current = this.prev
    }
}

func (this: *TypeChecker) pushScope(scope: *Scope) {    
    scope.init(ScopeKind.FUNC, this.currentScope, this.result, this.allocator);
    this.currentScope = scope
}

func (this: *TypeChecker) popScope() {
    this.currentScope = this.currentScope.parent
}


func (this: *TypeChecker) createDeclSymbol(decl: *Decl) {
    printf("Resolving Decl: ")
    PrintName(decl.name)
    printf("\n")

    var name:[MAX_SYMBOL_NAME]char;
    if(decl.name.type == TokenType.IDENTIFIER) {
        decl.name.str.copyTo(name, MAX_SYMBOL_NAME)
    }
    else {
        // TODO: Generate a random name
    }

    var sym: *Symbol = null
    if(decl.kind != StmtKind.FUNC_DECL) {
        sym = this.current.symbols.addSymbol(name as (*const char), this.current, decl, SymbolFlags.IS_INCOMPLETE)
        if(!sym) {
            goto err;
        }
    }

    switch(decl.kind) {            
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            this.pendingValues.add(sym)
            break;
        }
        case StmtKind.FUNC_DECL: {
            var funcDecl = decl as (*FuncDecl)
            if(funcDecl.flags & FuncFlags.IS_METHOD) {
                if(!funcDecl.getName(name)) {
                    this.result.addError(decl.startPos, "invalid function name")
                    goto err;
                }                
            }

            sym = this.current.symbols.addSymbol(name as (*const char), this.current, decl, SymbolFlags.IS_INCOMPLETE)
            if(!sym) {
                goto err;
            }

            sym.type = NewFuncTypeInfo(sym, funcDecl, this.allocator) as (*TypeInfo)
            this.symbolFuncs.add(sym)
            break;
        }
        case StmtKind.ENUM_DECL: {
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            this.symbolTypes.add(sym)
            break;
        }     
        case StmtKind.POISON_DECL: {            
            break; // Ignore, as this will already have a parsing error
        }   
        default: {
            PrintStmt(decl as (*Stmt), 0)
            assert(false)
        }
    }

err:
    return;    
}

func (this: *TypeChecker) createImportSymbols(imp: *ImportDecl) {
    printf("Resolving Import: ")
    PrintName(imp.name)
    printf("\n")

    for(var i = 0; i < this.current.ast.imports.size(); i += 1) {
        var other = this.current.ast.imports.get(i)
        if(imp == other) {
            continue
        }

        if(other.name.str.equalsStringView(imp.name.str)) {
            this.result.addError(imp.startPos, "duplicate import of module '%.*s'", 
                imp.name.str.length, imp.name.str.buffer)
            goto err;
        }
    }

    if(!imp.moduleId) {
        goto err;
    }

    var module = this.lita.modules.get(imp.moduleId.filename)
    if(!module) {
        this.result.addError(imp.startPos, "could not find module '%s'", 
                imp.moduleId.filename)
        goto err;
    }

    if(module.flags & ModuleFlags.TYPE_RESOLVED) {
        return;
    }

    module.flags |= ModuleFlags.TYPE_RESOLVED

    this.createModuleSymbols(module)
    this.current.importModule(imp, module)

err:
    return;    
}


func (this: *TypeChecker) resolveSymbols() {    
    
    {   // Start resolving the symbol types
        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)
            this.resolveSymbol(symbol)        
        }

        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)     
            this.finishResolveSymbol(symbol)
        }
    }

    {   // Resolve functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.resolveSymbol(symbol)        
        }
    }


    {   // Resolve variables
        for(var i = 0; i < this.pendingValues.size(); i += 1) {
            var symbol = this.pendingValues.get(i)
            this.resolveValue(symbol)        
        }
    }

    {   // Finish resolving the functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.resolveFunc(symbol)        
        }
    }
}


func (this: *TypeChecker) resolveSymbol(sym: *Symbol) {
    if(sym.state == SymbolState.RESOLVED ||
       sym.state == SymbolState.ERROR) {
        return;
    }

    if(sym.state == SymbolState.RESOLVING) {
        this.result.addError(sym.decl.startPos, "cyclic dependency found with '%s'", sym.name)
        return;
    }

    sym.state = SymbolState.RESOLVING
    this.enterModule(sym.declared)
    defer this.leaveModule()
    switch(sym.kind) {
        case SymbolKind.TYPE: {
            switch(sym.decl.kind) {
                case StmtKind.ENUM_DECL: {
                    var enumDecl = sym.decl as (*EnumDecl)
                    sym.type = NewEnumTypeInfo(sym, enumDecl, this.allocator) as (*TypeInfo)
                    break;
                }
                case StmtKind.TYPEDEF_DECL: {
                    var typedefDecl = sym.decl as (*TypedefDecl)
                    var aliasedType = this.resolveTypeSpec(typedefDecl.type)
                    if(!aliasedType) {
                        goto err;
                    }

                    if(typedefDecl.hasNote("foreign") && aliasedType.kind == TypeKind.VOID) {
                        aliasedType = NewForeignTypeInfo(sym, this.allocator)                        
                    }
                    sym.type = aliasedType
                    break;
                }
                case StmtKind.STRUCT_DECL: 
                case StmtKind.UNION_DECL: {
                    var aggregateDecl = sym.decl as (*AggregateDecl)
                    sym.type = NewAggregateTypeInfo(sym, aggregateDecl, this.allocator) as (*TypeInfo)
                    break;
                }
                default: {
                    assert(false)
                }
            }
            break
        }
        case SymbolKind.VAR:
        case SymbolKind.CONST: {
            if(!(sym.flags & SymbolFlags.IS_LOCAL)) {
                this.pendingValues.add(sym)
                return;
            }

            break
        }
        case SymbolKind.FUNC: {
            var funcDecl = sym.decl as (*FuncDecl)
            for(var i = 0; i < funcDecl.params.size() ; i += 1) {
                var param = funcDecl.params.get(i)
                param.typeInfo = this.resolveTypeSpec(param.type)
            }
            var funcInfo = sym.type != null ? 
                                sym.type as (*FuncTypeInfo) :
                                NewFuncTypeInfo(sym, funcDecl, this.allocator)

            var retType = this.resolveTypeSpec(funcDecl.returnType)
            funcInfo.returnType = TypeDecay(retType, this.allocator)

            sym.type = funcInfo as (*TypeInfo)
            break
        }
        default: {
            assert(false)
        }
    }

    sym.state = SymbolState.RESOLVED
    return;

err:    
    sym.state = SymbolState.ERROR
    return;
}

func (this: *TypeChecker) finishResolveSymbol(sym: *Symbol) {
    // check to see if this symbol is completed
    if(!(sym.flags & SymbolFlags.IS_INCOMPLETE)) {
        return;
    }

    this.enterModule(sym.declared)
    this.leaveModule()
    switch(sym.decl.kind) {
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL: {
            var aggDecl = sym.decl as (*AggregateDecl)
            for(var i = 0; i < aggDecl.fields.size(); i+=1) {
                var field = aggDecl.fields.get(i)
                this.resolveFieldStmt(sym, field)
            }

            this.resolveStmt(aggDecl as (*Stmt))
            sym.flags &= ~SymbolFlags.IS_INCOMPLETE
            break;
        }
        case StmtKind.ENUM_DECL: 
        case StmtKind.TYPEDEF_DECL: {
            this.resolveStmt(sym.decl as (*Stmt))
            sym.flags &= ~SymbolFlags.IS_INCOMPLETE
            break;
        }
        case StmtKind.FUNC_DECL:
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL:
            break;
        default: {
            assert(false)
        }
    }
}

func (this: *TypeChecker) resolveFieldStmt(parentSym: *Symbol, field: FieldStmt) {
    // TODO
}

func (this: *TypeChecker) getType(spec: *NameTypeSpec) : *Symbol {
    assert(spec != null)
    return this.current.getType(spec.name)
}

func (this: *TypeChecker) resolveTypeSpec(spec: *TypeSpec) : *TypeInfo {
    if(!spec) {
        return &VOID_TYPE
    }

    if(spec.typeInfo) {
        return spec.typeInfo
    }

    switch(spec.kind) {
        case TypeSpecKind.NAME: {
            var nameSpec = spec as (*NameTypeSpec)            
            var sym = this.getType(nameSpec)
            if(!sym) {
                this.result.addError(spec.pos, "unknown type '%s'", nameSpec.name)
                goto err;
            }

            if(!(sym.flags & SymbolFlags.IS_TYPE)) {
                this.result.addError(spec.pos, "'%s' must be a type", nameSpec.name)
                goto err;
            }

            this.resolveSymbol(sym)
            spec.typeInfo = sym.type
            return spec.typeInfo
        }
        case TypeSpecKind.CONST: {
            var constSpec = spec as (*ConstTypeSpec)
            var constOf = this.resolveTypeSpec(constSpec.base)
            spec.typeInfo = NewConstTypeInfo(constOf, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.PTR: {
            var ptrSpec = spec as (*PtrTypeSpec)
            var ptrOf = this.resolveTypeSpec(ptrSpec.base)
            spec.typeInfo = NewPtrTypeInfo(ptrOf, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.ARRAY: {
            var arraySpec = spec as (*ArrayTypeSpec)
            var arrayOf = this.resolveTypeSpec(arraySpec.base)
            var length: usize = 0
            if(arraySpec.numElements) {
                var expr = arraySpec.numElements
                if(!this.resolveConstExpr(expr)) {
                    goto err;
                }
                
                if(!IsInteger(expr.operand.typeInfo)) {
                    this.result.addError(expr.startPos,
                        "array size expression must be an integer type")
                    goto err;
                }


                length = expr.operand.val.intValue // TODO: fix: usize != i64
            }
            spec.typeInfo = NewArrayTypeInfo(arrayOf, length, arraySpec.numElements, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.FUNC_PTR: {
            var funcPtrSpec = spec as (*FuncPtrTypeSpec)
            var paramDecls = Array<*TypeInfo>{}
            if(!funcPtrSpec.args.empty()) {
                paramDecls.init(funcPtrSpec.args.size(), this.allocator)
                for(var i = 0; i < funcPtrSpec.args.size(); i+=1) {
                    var arg = funcPtrSpec.args.get(i)
                    var typeInfo = this.resolveTypeSpec(arg)
                    if(!typeInfo) {
                        goto err;
                    }

                    paramDecls.add(typeInfo)                    
                }
            }
            var returnType = this.resolveTypeSpec(funcPtrSpec.ret)
            spec.typeInfo = NewFuncPtrTypeInfo(funcPtrSpec.genericParams, returnType, paramDecls, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        default: {
            assert(false)
        }
    }

err:
    return null
}

func (this: *TypeChecker) resolveFunc(sym: *Symbol) {
    assert(sym.decl.kind == StmtKind.FUNC_DECL)

    this.resolveSymbol(sym) // I don't think this is needed..

    this.enterModule(sym.declared)
    defer this.leaveModule()

    sym.flags &= ~SymbolFlags.IS_INCOMPLETE
    this.resolveStmt(sym.decl as (*Stmt))
}

func (this: *TypeChecker) resolveValue(sym: *Symbol) {
    this.enterModule(sym.declared)
    this.leaveModule()
    switch(sym.kind) {
        case SymbolKind.CONST: 
        case SymbolKind.VAR: {
            var varDecl = sym.decl as (*VarDecl)
            sym.type = this.resolveValueDecl(varDecl)
            sym.state = SymbolState.RESOLVED
            sym.flags &= ~SymbolFlags.IS_INCOMPLETE

            var sb= StringBufferInit(256, this.allocator)
            sym.type.toString(sb)            
            break;
        }
        default: {
            assert(false)
        }
    }
}

func (this: *TypeChecker) resolveValueDecl(decl: *VarDecl) : *TypeInfo {    
    if(!decl.expr && decl.kind == StmtKind.CONST_DECL) {
        if(!decl.hasNote("foreign")) {
            this.result.addError(decl.startPos, "const declaration must have an assignment (unless it is '@foreign')")
            return null
        }
    }
    var declaredType: *TypeInfo = null
    var inferredType: *TypeInfo = null

    if(decl.typeSpec) {
        declaredType = this.resolveTypeSpec(decl.typeSpec)
    }

    if(decl.expr) {
        if(!this.resolveExpr(decl.expr)) {
            return null
        }

        var op = decl.expr.operand
        if(decl.expr.kind == StmtKind.ARRAY_INIT_EXPR || 
           decl.expr.kind == StmtKind.INIT_EXPR) {
            inferredType = op.typeInfo
        }
        else if(op.typeInfo.kind == TypeKind.NULL && declaredType == null) {
            this.result.addError(decl.expr.startPos,
                "invalid variable declaration, can't infer type from 'null' for '%.*s' variable", decl.name.str.length, decl.name.str.buffer)
            return null
        }
        else {
            inferredType = TypeDecay(op.typeInfo, this.allocator)
        }

        decl.expr.expectedType = declaredType ? declaredType : inferredType;
    }

    if(declaredType && inferredType) {        
        this.checkDeclarability(decl.expr.startPos, declaredType, inferredType)
    }

    return declaredType ? declaredType : inferredType
}

func (this: *TypeChecker) addSymbol(decl: *Decl, typeInfo: *TypeInfo) : *Symbol {
    var name:[MAX_SYMBOL_NAME]char;
    assert(decl.name.type == TokenType.IDENTIFIER) 
    decl.name.str.copyTo(name, MAX_SYMBOL_NAME)
    
    var sym = this.currentScope.addSymbol(name as (*const char), this.current, decl, 0)
    if(sym) {
        sym.type = typeInfo
        this.resolveSymbol(sym)
    }

    return sym
}


func (this: *TypeChecker) resolveStmt(stmt: *Stmt) : bool {
    if(!stmt) return true;

    switch(stmt.kind) {
        // --------------------------------------------------
        //          Declarations
        // --------------------------------------------------
        case StmtKind.IMPORT_DECL:
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.ENUM_DECL:
        case StmtKind.FUNC_DECL:
        case StmtKind.TYPEDEF_DECL:
        case StmtKind.PARAM_DECL:
        case StmtKind.NATIVE_DECL:
        case StmtKind.POISON_DECL: {
            return this.resolveDecl(stmt as (*Decl))
        }

        // --------------------------------------------------
        //          Statements
        // --------------------------------------------------
        case StmtKind.BLOCK_STMT: {
            var body = stmt as (*BlockStmt)
            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                this.resolveStmt(s)
            }
            return true
        }
        case StmtKind.BREAK_STMT: {
            return true;
        }
        case StmtKind.COMP_STMT: {
            return false; // TODO
        }
        case StmtKind.CONTINUE_STMT: {
            return true;
        }
        case StmtKind.DEFER_STMT: {
            var deferStmt = stmt as (*DeferStmt)
            this.resolveStmt(deferStmt.deferedStmt)
            return true
        }
        case StmtKind.DO_WHILE_STMT: {
            var whileStmt = stmt as (*DoWhileStmt)
            this.pushScope(&Scope{})
            this.resolveStmt(whileStmt.body)
            this.popScope()

            this.resolveExpr(whileStmt.cond)            
            return true
        }
        case StmtKind.EMPTY_STMT: {
            return true;
        }
        case StmtKind.ENUM_FIELD_ENTRY_STMT: {
            return false; // TODO
        }
        case StmtKind.ENUM_FIELD_STMT:{
            return false; // TODO
        }
        case StmtKind.FOR_STMT: {
            var forStmt = stmt as (*ForStmt)
            this.pushScope(&Scope{})
            if(forStmt.init) this.resolveStmt(forStmt.init)
            if(forStmt.cond) this.resolveExpr(forStmt.cond)
            if(forStmt.post) this.resolveStmt(forStmt.post)
            this.resolveStmt(forStmt.body)
            this.popScope()
            return true
        }
        case StmtKind.FUNC_BODY_STMT: {
            var body = stmt as (*FuncBodyStmt)
            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                this.resolveStmt(s)
            }
            return true
        }
        case StmtKind.GOTO_STMT: {
            return false; // TODO
        }
        case StmtKind.IF_STMT: {
            var ifStmt = stmt as (*IfStmt)
            this.resolveExpr(ifStmt.cond)
            
            this.pushScope(&Scope{})
            this.resolveStmt(ifStmt.then)
            this.popScope()

            if(ifStmt.elseStmt) {
                this.pushScope(&Scope{})
                this.resolveStmt(ifStmt.elseStmt)
                this.popScope()
            }
            return true
        }
        case StmtKind.LABEL_STMT: {
            return false; // TODO
        }
        case StmtKind.MODULE_STMT: {
            return true;
        }
        case StmtKind.NOTE_STMT: {
            return true;
        }
        case StmtKind.PARAMETERS_STMT: {
            var params = stmt as (*ParametersStmt)
            var hasDefault = false
            for(var i = 0; i < params.size(); i += 1) {
                var param = params.get(i)
                this.resolveParamDecl(param)

                if(param.defaultExpr) {
                    hasDefault = true
                }
                else if(hasDefault) {
                    var parentDecl = params.parent as (*FuncDecl)
                    assert(parentDecl != null)
                    assert(parentDecl.kind == StmtKind.FUNC_DECL)
                    this.result.addError(parentDecl.startPos, "'%.*s' must have default arguments defined last", 
                                    parentDecl.name.str.length, parentDecl.name.str.buffer)
                    return false;
                }

            }
            return true;
        }
        case StmtKind.RETURN_STMT: {
            var ret = stmt as (*ReturnStmt)
            if(ret.expr) {
                if(!this.resolveExpr(ret.expr)) {
                    return false
                }

                this.checkTypeCompatibility(ret.expr.startPos, ret.expr.operand.typeInfo, this.currentFuncDecl.returnType)
                ret.expr.expectedType = this.currentFuncDecl.returnType
            }
            else {
                this.checkTypeCompatibility(ret.startPos, &VOID_TYPE, this.currentFuncDecl.returnType)
            }
            return true;
        }
        case StmtKind.STRUCT_FIELD_STMT:{
            return false; // TODO
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var caseStmt = stmt as (*SwitchCaseStmt)
            this.resolveExpr(caseStmt.cond)            
            this.resolveStmt(caseStmt.body)            
            return true
        }
        case StmtKind.SWITCH_STMT:{
            var switchStmt = stmt as (*SwitchStmt)
            this.resolveExpr(switchStmt.cond)
            for(var i = 0; i < switchStmt.cases.size(); i+=1) {
                var caseStmt = switchStmt.cases.get(i)
                this.resolveStmt(caseStmt)
            }
            if(switchStmt.defaultStmt) {
                this.resolveStmt(switchStmt.defaultStmt)
            }
            return true
        }
        case StmtKind.UNION_FIELD_STMT:{
            return false; // TODO
        }
        case StmtKind.VAR_FIELD_STMT:{
            return false; // TODO
        }
        case StmtKind.WHILE_STMT: {
            var whileStmt = stmt as (*WhileStmt)
            this.resolveExpr(whileStmt.cond)
            
            this.pushScope(&Scope{})
            this.resolveStmt(whileStmt.body)
            this.popScope()
            return true
        }

        // --------------------------------------------------
        //          Expressions
        // --------------------------------------------------
        case StmtKind.ARRAY_DESIGNATION_EXPR:
        case StmtKind.ARRAY_INIT_EXPR:
        case StmtKind.BINARY_EXPR:
        case StmtKind.BOOLEAN_EXPR:
        case StmtKind.CAST_EXPR:
        case StmtKind.CHAR_EXPR:
        case StmtKind.FUNC_CALL_EXPR:
        case StmtKind.FUNC_IDENTIFIER_EXPR:
        case StmtKind.GET_EXPR:
        case StmtKind.GROUP_EXPR:
        case StmtKind.IDENTIFIER_EXPR:
        case StmtKind.INIT_EXPR:
        case StmtKind.INIT_ARG_EXPR:
        case StmtKind.NULL_EXPR:
        case StmtKind.NUMBER_EXPR:
        case StmtKind.OFFSET_OF_EXPR:
        case StmtKind.SET_EXPR: 
        case StmtKind.SIZE_OF_EXPR:
        case StmtKind.STRING_EXPR:   
        case StmtKind.SUBSCRIPT_GET_EXPR:
        case StmtKind.SUBSCRIPT_SET_EXPR:
        case StmtKind.TERNARY_EXPR:
        case StmtKind.TYPE_IDENTIFIER_EXPR:
        case StmtKind.TYPE_OF_EXPR:
        case StmtKind.UNARY_EXPR:
        case StmtKind.POISON_EXPR: {
            return this.resolveExpr(stmt as (*Expr))
        }
        default: {
            assert(false)
        }
    }

    return false
}