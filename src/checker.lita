import "types"
import "types_new"
import "symbols"
import "phase_result"
import "module"
import "ast"
import "ast_new"
import "lex"
import "lita"
import "map"
import "string_buffer"
import "string_view"
import "array"
import "assert"
import "string"
import "ast_print"
import "libc"
import "generics"

import "checker_decl"
import "checker_expr"

/**
===================================================================
    Type Checker
===================================================================
*/

// max number of labels in a function scope -- this should be enough :S
const MAX_LABELS = 256;
const MAX_LABEL_NAME = 32;

struct LabelInfo {
    name: StringView
    defined: bool
    stmt: *Stmt
}

struct GenericContext {
    callsite: *Module
}

public struct TypeChecker {
    lita: using *Lita

    current: *Module
    moduleStack: Array<*Module>

    funcDeclStack: Array<*FuncTypeInfo>

    pendingValues: Array<*Symbol>
    symbolTypes: Array<*Symbol>     // all types from all modules
    symbolFuncs: Array<*Symbol>

    genericContext: GenericContext
    genericParamStack: Array<Array<GenericParam>>
    //genericTypes: Map<*const char, *Symbol>
    genericTemplates: Array<*Symbol>

    labels: [MAX_LABELS]LabelInfo;
    numOfLabels: i32

    randomNameIndex: u32
}

public func (this: *TypeChecker) init(lita: *Lita) {
    this.lita = lita
    this.current = null
    //this.currentScope = null
    this.moduleStack.init(64, lita.allocator)
    this.funcDeclStack.init(64, lita.allocator)
    this.pendingValues.init(128, lita.allocator)
    this.symbolTypes.init(256, lita.allocator)
    this.symbolFuncs.init(256, lita.allocator)
    this.genericParamStack.init(128, lita.allocator)
    this.genericTemplates.init(64, lita.allocator)
    //this.genericTypes = StrMap<*Symbol>(null, 64, lita.allocator)
    this.genericContext.callsite = null

    memset(this.labels, 0, MAX_LABELS * sizeof(:LabelInfo))
    this.numOfLabels = 0
}

public func (this: *TypeChecker) typeCheck(root: *Module) : ProgramSymbols {
    if(root.flags & ModuleFlags.TYPE_CHECKED) {
        goto exit;
    }

    root.flags |= ModuleFlags.TYPE_CHECKED

    this.createModuleSymbols(root)
    this.resolveSymbols()

    for(var it = this.current.genericSymbols.iter(); it.hasNext();) {
        var entry = it.next()
        var sym = entry.value

        if(sym.decl.kind == StmtKind.FUNC_DECL) {
            this.symbolFuncs.add(sym)
        }
        else {
            this.symbolTypes.add(sym)
        }
    }

exit:
    return ProgramSymbols {
        .values = this.pendingValues,
        .symbolTypes = this.symbolTypes,
        .symbolFuncs = this.symbolFuncs,
    };
}

func (this: *TypeChecker) checkCastability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.canCastTo(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be casted to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkAssignability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isAssignable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be assigned to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkDeclarability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isDeclarable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' can't be assigned to '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) checkTypeCompatibility(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    assert(a != null)
    assert(b != null)

    if(!a.isAssignable(b)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.append("'")
        b.toString(sb)
        sb.append("' is not of type '")
        a.toString(sb)
        sb.append("'")

        this.result.addErrorStr(src, sb)
        return false
    }
    return true
}

func (this: *TypeChecker) createModuleSymbols(module: *Module) {
    if(!module.ast) {
        return;
    }

    this.enterModule(module)
    defer this.leaveModule()

    for(var i = 0; i < module.ast.declarations.size(); i += 1) {
        var decl = module.ast.declarations.get(i)
        this.createDeclSymbol(decl)
    }

    for(var i = 0; i < module.ast.imports.size(); i += 1) {
        var imp = module.ast.imports.get(i)
        this.createImportSymbols(imp)
    }

}

func (this: *TypeChecker) enterModule(module: *Module) {
    this.moduleStack.push(module)
    this.current = module
}

func (this: *TypeChecker) leaveModule() {
    var oldScope = this.current;

    if(this.moduleStack.size()) {
        this.moduleStack.pop()
        if(this.moduleStack.size()) {
            this.current = this.moduleStack.last()
        }
    }
}

func (this: *TypeChecker) currentScope() : *Scope {
    return this.current.currentScope
}

func (this: *TypeChecker) pushScope(scope: *Scope) {
    scope.init(ScopeKind.FUNC, this.currentScope(), this.result, this.allocator);
    scope.module = this.current
    this.current.currentScope = scope
}

func (this: *TypeChecker) popScope() {
    if(this.currentScope()) {
        this.current.currentScope = this.current.currentScope.parent
    }
}

func (this: *TypeChecker) isGenericParamType(name: *NameTypeSpec) : bool {
    for(var k = 0; k < this.genericParamStack.size(); k += 1) {
        var params = &this.genericParamStack.elements[k]

        for(var i = 0; i < params.size(); i+=1) {
            var param = params.get(i)
            assert(param.name.type == TokenType.IDENTIFIER)

            if(param.name.str.equals(name.name)) {
                return true;
            }
        }
    }

    return false
}


func (this: *TypeChecker) createDeclSymbol(decl: *Decl) : *Symbol {
    assert(decl != null)

    if(decl.sym) {
        return decl.sym
    }

    var name:[MAX_SYMBOL_NAME]char;
    if(decl.name.type == TokenType.IDENTIFIER) {
        decl.name.str.copyTo(name, MAX_SYMBOL_NAME)
    }
    else {
        var nameStr = StringInit(name, MAX_SYMBOL_NAME)
        nameStr.format("anon_%d", this.randomNameIndex)
        this.randomNameIndex+=1
    }

    var sym: *Symbol = null
    if(decl.kind != StmtKind.FUNC_DECL) {
        sym = this.current.symbols.addSymbol(name as (*const char), this.current, decl, SymbolFlags.IS_INCOMPLETE)
        if(!sym) {
            goto err;
        }
    }

    switch(decl.kind) {
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var varDecl = decl as (*VarDecl)

            if(varDecl.expr.isConstExpr() || varDecl.hasNote("foreign")) {
                this.result.enabled = false
                var isValid = this.resolveValueDecl(varDecl)
                this.result.enabled = true

                // if this is resolvable, this means it
                // is a valid constant expression and we don't need
                // to resolve it later
                if(isValid) {
                    this.finishResolveSymbol(sym)
                }
            }
            this.pendingValues.add(sym)
            break;
        }
        case StmtKind.FUNC_DECL: {
            var funcDecl = decl as (*FuncDecl)
            if(funcDecl.flags & FuncFlags.IS_METHOD) {
                if(!funcDecl.getName(name)) {
                    this.result.addError(decl.startPos, "invalid function name")
                    goto err;
                }
            }

            sym = this.current.symbols.addSymbol(name as (*const char), this.current, decl, SymbolFlags.IS_INCOMPLETE)
            if(!sym) {
                goto err;
            }

            if(!funcDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
                this.genericTemplates.add(sym)
            }

            sym.type = NewFuncTypeInfo(sym, funcDecl, this.allocator) as (*TypeInfo)
            this.symbolFuncs.add(sym)
            break;
        }
        case StmtKind.ENUM_DECL: {
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            var aggDecl = decl as (*AggregateDecl)
            if(!aggDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
                this.genericTemplates.add(sym)
            }
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            var typedefDecl = decl as (*TypedefDecl)
            if(!typedefDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
            }
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.POISON_DECL: {
            break; // Ignore, as this will already have a parsing error
        }
        default: {
            PrintStmt(decl as (*Stmt), 0)
            assert(false)
        }
    }

    return sym

err:
    return null
}

func (this: *TypeChecker) createImportSymbols(imp: *ImportDecl) {

    for(var i = 0; i < this.current.ast.imports.size(); i += 1) {
        var other = this.current.ast.imports.get(i)
        if(imp == other) {
            continue
        }

        if(other.name.str.equalsStringView(imp.name.str)) {
            this.result.addError(imp.startPos, "duplicate import of module '%.*s'",
                imp.name.str.length, imp.name.str.buffer)
            goto err;
        }
    }

    if(!imp.moduleId) {
        goto err;
    }

    var module = this.lita.modules.get(imp.moduleId.filename)
    if(!module) {
        this.result.addError(imp.startPos, "could not find module '%s'",
                imp.moduleId.filename)
        goto err;
    }

    if(module == this.current) {
        return;
    }

    if(!(module.flags & ModuleFlags.TYPE_RESOLVED)) {
        module.flags |= ModuleFlags.TYPE_RESOLVED
        this.createModuleSymbols(module)
    }

    this.current.importModule(imp, module)

err:
    return;
}


func (this: *TypeChecker) resolveSymbols() {

    {   // Start resolving the symbol types
        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)
            this.resolveSymbol(symbol)
        }

        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

    {   // Resolve functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.resolveSymbol(symbol)
        }
    }


    {   // Resolve variables
        for(var i = 0; i < this.pendingValues.size(); i += 1) {
            var symbol = this.pendingValues.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

    {   // Finish resolving the functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

}


func (this: *TypeChecker) resolveSymbol(sym: *Symbol) {
    if(sym.state == SymbolState.RESOLVED ||
       sym.state == SymbolState.ERROR) {
        return;
    }

    if(sym.state == SymbolState.RESOLVING) {
        this.result.addError(sym.decl.startPos, "cyclic dependency found with '%s'", sym.name)
        goto err;
    }

    this.enterModule(sym.declared)
    defer this.leaveModule()

    sym.state = SymbolState.RESOLVING

    switch(sym.kind) {
        case SymbolKind.TYPE: {
            switch(sym.decl.kind) {
                case StmtKind.ENUM_DECL: {
                    var enumDecl = sym.decl as (*EnumDecl)
                    sym.type = NewEnumTypeInfo(sym, enumDecl, this.allocator) as (*TypeInfo)
                    break;
                }
                case StmtKind.TYPEDEF_DECL: {
                    var typedefDecl = sym.decl as (*TypedefDecl)

                    var hasGenerics = !typedefDecl.genericParams.empty()
                    if(hasGenerics) {
                        this.genericParamStack.add(typedefDecl.genericParams)
                    }

                    defer if(hasGenerics) {
                        this.genericParamStack.pop()
                    }

                    var aliasedType = this.resolveTypeSpec(typedefDecl.type)
                    if(!aliasedType) {
                        goto err;
                    }

                    if(typedefDecl.hasNote("foreign") && aliasedType.kind == TypeKind.VOID) {
                        aliasedType = NewForeignTypeInfo(sym, this.allocator)
                    }
                    sym.type = aliasedType
                    break;
                }
                case StmtKind.STRUCT_DECL:
                case StmtKind.UNION_DECL: {
                    var aggregateDecl = sym.decl as (*AggregateDecl)
                    sym.type = NewAggregateTypeInfo(sym, aggregateDecl, this.allocator) as (*TypeInfo)
                    break;
                }
                default: {
                    assert(false)
                }
            }
            break
        }
        case SymbolKind.VAR:
        case SymbolKind.CONST: {
            if(!(sym.flags & SymbolFlags.IS_LOCAL)) {
                this.pendingValues.add(sym)
                return;
            }

            break
        }
        case SymbolKind.FUNC: {
            var funcDecl = sym.decl as (*FuncDecl)
            var funcInfo = sym.type != null ?
                                sym.type as (*FuncTypeInfo) :
                                NewFuncTypeInfo(sym, funcDecl, this.allocator)

            var hasGenerics = !funcDecl.genericParams.empty() //sym.flags & SymbolFlags.IS_GENERIC_TEMPLATE
            if(hasGenerics) {
                this.genericParamStack.add(funcDecl.genericParams)
            }

            defer if(hasGenerics) {
                this.genericParamStack.pop()
            }

            for(var i = 0; i < funcDecl.params.size() ; i += 1) {
                var param = funcDecl.params.get(i)
                param.typeInfo = this.resolveTypeSpec(param.type)
                if(!param.typeInfo) {
                    goto err;
                }
                /*
                if(hasGenerics) {

                    PrintTypeSpec(param.type)
                    var sb = StringBufferInit()
                    param.typeInfo.toString(sb)
                    printf(" => %s [", sb.cStr())
                    var base = param.typeInfo.getBaseType()
                    switch(base.kind) {
                        case TypeKind.FUNC:
                        case TypeKind.FUNC_PTR:
                            break
                        case TypeKind.STRUCT:
                        case TypeKind.UNION: {
                            var aggInfo = base as (*AggregateTypeInfo)
                            for(var i = 0; i < aggInfo.decl.genericParams.size(); i += 1) {
                                var p = aggInfo.decl.genericParams.get(i)
                                printf("%.*s ", p.name.str.length, p.name.str.buffer)
                            }
                            printf(" vs. ")
                            for(var i = 0; i < aggInfo.sym.genericParams.size(); i += 1) {
                                var p = aggInfo.sym.genericParams.get(i)
                                printf("%.*s ", p.name.str.length, p.name.str.buffer)
                            }

                            printf(" vs. ")
                            for(var i = 0; i < aggInfo.sym.genericArgs.size(); i += 1) {
                                var p = aggInfo.sym.genericArgs.get(i)
                                sb.clear()
                                p.toString(sb)
                                printf("%s ", sb.cStr())
                            }
                        }
                        default:
                    }
                    printf("]\n")
                }*/
            }

            var retType = this.resolveTypeSpec(funcDecl.returnType)
            if(!retType) {
                goto err;
            }

            funcInfo.returnType = TypeDecay(retType, this.allocator)
            sym.type = funcInfo as (*TypeInfo)
            break
        }
        default: {
            assert(false)
        }
    }

    sym.state = SymbolState.RESOLVED
    return;

err:
    sym.state = SymbolState.ERROR
    if(!sym.type) {
        sym.type = &POISON_TYPE
    }
    return;
}

func (this: *TypeChecker) finishResolveSymbol(sym: *Symbol) {
    // check to see if this symbol is completed or a generic template
    if(!(sym.flags & SymbolFlags.IS_INCOMPLETE) ||
        (sym.flags & SymbolFlags.IS_GENERIC_TEMPLATE)) {
        return;
    }

    this.enterModule(sym.declared)
    defer this.leaveModule()

    sym.flags &= ~SymbolFlags.IS_INCOMPLETE

    switch(sym.decl.kind) {
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL: {
            var aggDecl = sym.decl as (*AggregateDecl)
            this.resolveAggregateDecl(aggDecl)
            break;
        }
        case StmtKind.ENUM_DECL: {
            var enumDecl = sym.decl as (*EnumDecl)
            this.resolveEnumDecl(enumDecl)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            var typedefDecl = sym.decl as (*TypedefDecl)
            this.resolveTypedefDecl(typedefDecl)
            break;
        }
        case StmtKind.FUNC_DECL: {
            var funcDecl = sym.decl as (*FuncDecl)
            this.resolveFuncDecl(funcDecl)
            break;
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var varDecl = sym.decl as (*VarDecl)
            sym.type = this.resolveValueDecl(varDecl)
            sym.state = SymbolState.RESOLVED
            break;
        }
        default: {
            assert(false)
        }
    }
}

func (this: *TypeChecker) getType(spec: *NameTypeSpec) : *Symbol {
    assert(spec != null)
    var type = this.current.getType(spec.name)
    if(!type) {
        if(this.genericContext.callsite) {
            return this.genericContext.callsite.getType(spec.name)
        }
    }

    return type
}

func (this: *TypeChecker) resolveTypeSpec(spec: *TypeSpec) : *TypeInfo {
    if(!spec) {
        return &VOID_TYPE
    }

    if(spec.typeInfo) {
        return spec.typeInfo
    }

    switch(spec.kind) {
        case TypeSpecKind.NAME: {
            var nameSpec = spec as (*NameTypeSpec)

            if(this.isGenericParamType(nameSpec)) {
                nameSpec.typeInfo = NewGenericParamTypeInfo(nameSpec.name, this.allocator)
                return nameSpec.typeInfo
            }

            var sym = this.getType(nameSpec)
            if(!sym) {
                sym = this.currentScope().lookup(nameSpec.name)
                if(!sym) {
                    this.result.addError(spec.pos, "unknown type '%s'", nameSpec.name)
                    goto err;
                }
            }

            if(!(sym.flags & SymbolFlags.IS_TYPE) && !IsFuncLike(sym.type)) {
                this.result.addError(spec.pos, "'%s' must be a type", nameSpec.name)
                goto err;
            }

            this.resolveSymbol(sym)

            if(!nameSpec.genericArgs.empty()) {
                sym = CreateTypeFromGenericTemplate(this, sym, nameSpec)
                if(!sym) {
                    goto err;
                }
            }

            spec.typeInfo = sym.type
            return spec.typeInfo
        }
        case TypeSpecKind.CONST: {
            var constSpec = spec as (*ConstTypeSpec)
            var constOf = this.resolveTypeSpec(constSpec.base)
            spec.typeInfo = NewConstTypeInfo(constOf, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.PTR: {
            var ptrSpec = spec as (*PtrTypeSpec)
            var ptrOf = this.resolveTypeSpec(ptrSpec.base)
            spec.typeInfo = NewPtrTypeInfo(ptrOf, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.ARRAY: {
            var arraySpec = spec as (*ArrayTypeSpec)
            var arrayOf = this.resolveTypeSpec(arraySpec.base)
            var length: usize = 0
            if(arraySpec.numElements) {
                var expr = arraySpec.numElements
                if(!this.resolveConstExpr(expr)) {
                    goto err;
                }

                if(!IsInteger(expr.operand.typeInfo)) {
                    this.result.addError(expr.startPos,
                            "array size expression must be an integer type")
                    goto err;
                }


                length = expr.operand.val.intValue // TODO: fix: usize != i64
            }
            spec.typeInfo = NewArrayTypeInfo(arrayOf, length, arraySpec.numElements, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.FUNC_PTR: {
            var funcPtrSpec = spec as (*FuncPtrTypeSpec)
            var paramDecls = Array<*TypeInfo>{}
            if(!funcPtrSpec.args.empty()) {
                paramDecls.init(funcPtrSpec.args.size(), this.allocator)
                for(var i = 0; i < funcPtrSpec.args.size(); i+=1) {
                    var arg = funcPtrSpec.args.get(i)
                    var typeInfo = this.resolveTypeSpec(arg)
                    paramDecls.add(typeInfo)
                }
            }
            var returnType = this.resolveTypeSpec(funcPtrSpec.ret)
            spec.typeInfo = NewFuncPtrTypeInfo(funcPtrSpec.genericParams, returnType, paramDecls, funcPtrSpec.hasVarargs, this.allocator) as (*TypeInfo)
            return spec.typeInfo
        }
        default: {
            assert(false)
        }
    }

err:
    if(!spec.typeInfo) {
        spec.typeInfo = &POISON_TYPE
    }

    return &POISON_TYPE
}

func (this: *TypeChecker) addSymbol(decl: *Decl, typeInfo: *TypeInfo) : *Symbol {
    var name:[MAX_SYMBOL_NAME]char;
    assert(decl.name.type == TokenType.IDENTIFIER)
    decl.name.str.copyTo(name, MAX_SYMBOL_NAME)

    var sym = this.current.currentScope.addSymbol(name as (*const char), this.current, decl, 0)
    if(sym) {
        sym.type = typeInfo
        this.resolveSymbol(sym)
    }

    return sym
}

func (this: *TypeChecker) addTypeToScope(decl: *Decl, scope: *Scope, baseType: *TypeInfo, currentType: *AggregateTypeInfo) {
    for(var i = 0; i < currentType.decl.fields.size(); i += 1) {
        var field = currentType.decl.fields.get(i)

        switch(field.kind) {
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                if(varField.name.type != TokenType.IDENTIFIER) {
                    break
                }

                var varDecl = NewVarDecl(decl.startPos, decl.endPos, decl.name, varField.type, null, this.allocator)

                var name:[MAX_SYMBOL_NAME]char;
                varField.name.str.copyTo(name, MAX_SYMBOL_NAME)

                varDecl.sym = scope.addSymbol(name as (*const char), this.current, varDecl, SymbolFlags.IS_USING)
                varDecl.sym.type = field.typeInfo
                varDecl.sym.usingParent = decl.sym

                this.resolveSymbol(varDecl.sym)

                if(varField.attributes.isUsing) {
                    var fieldBaseType = field.typeInfo.getBaseType()
                    assert(IsAggregate(fieldBaseType))
                    this.addTypeToScope(decl, scope, baseType, fieldBaseType as (*AggregateTypeInfo))
                }
                break;
            }
            case StmtKind.ENUM_FIELD_DECL:
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL:
                // TODO: Should Union/Struct be placed in scope?
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }
}


func (this: *TypeChecker) resolveStmt(stmt: *Stmt) : bool {
    if(!stmt) return true;

    switch(stmt.kind) {
        // --------------------------------------------------
        //          Declarations
        // --------------------------------------------------
        case StmtKind.IMPORT_DECL:
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.ENUM_DECL:
        case StmtKind.FUNC_DECL:
        case StmtKind.TYPEDEF_DECL:
        case StmtKind.PARAM_DECL:
        case StmtKind.NATIVE_DECL:
        case StmtKind.POISON_DECL: {
            return this.resolveDecl(stmt as (*Decl))
        }

        // --------------------------------------------------
        //          Statements
        // --------------------------------------------------
        case StmtKind.BLOCK_STMT: {
            var body = stmt as (*BlockStmt)
            this.pushScope(&Scope{})
            defer this.popScope()

            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                if(!this.resolveStmt(s)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.BREAK_STMT: {
            return true;
        }
        case StmtKind.COMP_STMT: {
            var compStmt = stmt as (*CompStmt)
            var stmt = this.lita.preprocessor.evaluateForFunction(compStmt)
            if(!stmt) {
                return false;
            }

            return this.resolveStmt(stmt)
        }
        case StmtKind.CONTINUE_STMT: {
            return true;
        }
        case StmtKind.DEFER_STMT: {
            var deferStmt = stmt as (*DeferStmt)
            if(!this.resolveStmt(deferStmt.deferedStmt)) {
                return false
            }
            return true
        }
        case StmtKind.DO_WHILE_STMT: {
            var whileStmt = stmt as (*DoWhileStmt)
            {
                this.pushScope(&Scope{})
                defer this.popScope()
                if(!this.resolveStmt(whileStmt.body)) {
                    return false
                }
            }

            if(!this.resolveExpr(whileStmt.cond)) {
                return false
            }

            return true
        }
        case StmtKind.EMPTY_STMT: {
            return true;
        }
        case StmtKind.FOR_STMT: {
            var forStmt = stmt as (*ForStmt)
            this.pushScope(&Scope{})
            defer this.popScope()

            if(forStmt.init && !this.resolveStmt(forStmt.init)) {
                return false
            }
            if(forStmt.cond && !this.resolveExpr(forStmt.cond)) {
                return false
            }
            if(forStmt.post && !this.resolveStmt(forStmt.post)) {
                return false
            }
            if(!this.resolveStmt(forStmt.body)) {
                return false
            }
            return true
        }
        case StmtKind.FUNC_BODY_STMT: {
            var body = stmt as (*FuncBodyStmt)

            var success = true
            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                if(!this.resolveStmt(s)) {
                    success = false
                    break // TODO: Do we want to allow this to proceed?
                }
            }
            return success
        }
        case StmtKind.GOTO_STMT: {
            var gotoStmt = stmt as (*GotoStmt)
            if(gotoStmt.label.type != TokenType.IDENTIFIER) {
                return false
            }

            // check to see if the label has already been created
            for(var i = 0; i < this.numOfLabels; i+=1) {
                var label = &this.labels[i]
                if(gotoStmt.label.str.equalsStringView(label.name)) {
                    label.stmt = stmt
                    return true
                }
            }

            // other create it
            var labelName = &this.labels[this.numOfLabels]
            labelName.name = gotoStmt.label.str
            labelName.stmt = stmt
            labelName.defined = false

            this.numOfLabels += 1

            return false;
        }
        case StmtKind.IF_STMT: {
            var ifStmt = stmt as (*IfStmt)
            if(!this.resolveExpr(ifStmt.cond)) {
                return false
            }

            {
                this.pushScope(&Scope{})
                defer this.popScope()

                if(!this.resolveStmt(ifStmt.then)) {
                    return false
                }
            }

            if(ifStmt.elseStmt) {
                this.pushScope(&Scope{})
                defer this.popScope()

                if(!this.resolveStmt(ifStmt.elseStmt)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.LABEL_STMT: {
            var labelStmt = stmt as (*LabelStmt)
            if(labelStmt.label.type != TokenType.IDENTIFIER) {
                return false
            }

            if(this.numOfLabels >= MAX_LABELS) {
                this.result.addError(labelStmt.startPos, "max number of labels reached")
                return false
            }

            for(var i = 0; i < this.numOfLabels; i+=1) {
                var label = &this.labels[i]
                if(labelStmt.label.str.equalsStringView(label.name)) {
                    label.defined = true
                    return true
                }
            }

            var labelName = &this.labels[this.numOfLabels]
            labelName.name = labelStmt.label.str
            labelName.defined = true
            labelName.stmt = null

            this.numOfLabels += 1
            return true;
        }
        case StmtKind.MODULE_STMT: {
            return true;
        }
        case StmtKind.NOTE_STMT: {
            return true;
        }
        case StmtKind.PARAMETERS_STMT: {
            var params = stmt as (*ParametersStmt)
            var hasDefault = false
            for(var i = 0; i < params.size(); i += 1) {
                var param = params.get(i)
                if(!this.resolveParamDecl(param)) {
                    return false
                }

                if(param.defaultExpr) {
                    hasDefault = true
                }
                else if(hasDefault) {
                    var parentDecl = params.parent as (*FuncDecl)
                    assert(parentDecl != null)
                    assert(parentDecl.kind == StmtKind.FUNC_DECL)
                    this.result.addError(parentDecl.startPos, "'%.*s' must have default arguments defined last",
                                    parentDecl.name.str.length, parentDecl.name.str.buffer)
                    return false;
                }

            }
            return true;
        }
        case StmtKind.RETURN_STMT: {
            var ret = stmt as (*ReturnStmt)
            var currentFuncDecl = this.funcDeclStack.last()
            if(ret.expr) {
                if(!this.resolveExpr(ret.expr)) {
                    return false
                }

                ret.expr = this.coerceTypeWithUsing(ret.expr, ret.expr.operand.typeInfo, currentFuncDecl.returnType)

                this.checkTypeCompatibility(ret.expr.startPos, currentFuncDecl.returnType, ret.expr.operand.typeInfo)
                ret.expr.expectedType = currentFuncDecl.returnType
            }
            else {
                this.checkTypeCompatibility(ret.startPos, currentFuncDecl.returnType, &VOID_TYPE)
            }
            return true;
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var caseStmt = stmt as (*SwitchCaseStmt)
            if(!this.resolveExpr(caseStmt.cond)) {
                return false
            }
            if(!this.resolveStmt(caseStmt.body)) {
                return false
            }
            return true
        }
        case StmtKind.SWITCH_STMT:{
            var switchStmt = stmt as (*SwitchStmt)
            if(!this.resolveExpr(switchStmt.cond)) {
                return false
            }
            for(var i = 0; i < switchStmt.cases.size(); i+=1) {
                var caseStmt = switchStmt.cases.get(i)
                if(!this.resolveStmt(caseStmt)) {
                    return false
                }
            }
            if(switchStmt.defaultStmt) {
                if(!this.resolveStmt(switchStmt.defaultStmt)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.ENUM_FIELD_DECL:
            // handled in resolveEnumDecl
        case StmtKind.ENUM_FIELD_ENTRY_DECL:
        case StmtKind.STRUCT_FIELD_DECL:
        case StmtKind.UNION_FIELD_DECL:
        case StmtKind.VAR_FIELD_DECL:{
            // handled in the resolveAggregateDecl
            assert(false)
            return false;
        }
        case StmtKind.WHILE_STMT: {
            var whileStmt = stmt as (*WhileStmt)
            if(!this.resolveExpr(whileStmt.cond)) {
                return false
            }

            this.pushScope(&Scope{})
            defer this.popScope()
            if(!this.resolveStmt(whileStmt.body)) {
                return false
            }
            return true
        }

        // --------------------------------------------------
        //          Expressions
        // --------------------------------------------------
        case StmtKind.ARRAY_DESIGNATION_EXPR:
        case StmtKind.ARRAY_INIT_EXPR:
        case StmtKind.BINARY_EXPR:
        case StmtKind.BOOLEAN_EXPR:
        case StmtKind.CAST_EXPR:
        case StmtKind.CHAR_EXPR:
        case StmtKind.FUNC_CALL_EXPR:
        case StmtKind.FUNC_IDENTIFIER_EXPR:
        case StmtKind.GET_EXPR:
        case StmtKind.GROUP_EXPR:
        case StmtKind.IDENTIFIER_EXPR:
        case StmtKind.INIT_EXPR:
        case StmtKind.INIT_ARG_EXPR:
        case StmtKind.NULL_EXPR:
        case StmtKind.NUMBER_EXPR:
        case StmtKind.OFFSET_OF_EXPR:
        case StmtKind.SET_EXPR:
        case StmtKind.SIZE_OF_EXPR:
        case StmtKind.STRING_EXPR:
        case StmtKind.SUBSCRIPT_GET_EXPR:
        case StmtKind.SUBSCRIPT_SET_EXPR:
        case StmtKind.TERNARY_EXPR:
        case StmtKind.TYPE_IDENTIFIER_EXPR:
        case StmtKind.TYPE_OF_EXPR:
        case StmtKind.UNARY_EXPR:
        case StmtKind.POISON_EXPR: {
            return this.resolveExpr(stmt as (*Expr))
        }
        default: {
            assert(false)
        }
    }

    return false
}