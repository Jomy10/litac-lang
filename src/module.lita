import "ast"
import "ast_new"
import "lex"
import "array"
import "phase_result"
import "string"
import "string_view"
import "string_buffer"
import "system"
import "state"
import "libc"
import "mem"
import "symbols"
import "types"

public enum ModuleFlags {
    TYPE_CHECKED  = (1<<0),
    TYPE_RESOLVED = (1<<1),
}

public struct ModuleId {    
    filename: [MAX_PATH]char   // full path the file of this module
    packageName: StringView    // relative path from the main module's directory
    name: StringView           // the name of the module 
}

public struct Module {
    id: ModuleId       // TODO: don't make a separate allocation
    text: *char         // text of modules file
    ast: *ModuleStmt
    result: *PhaseResult
    symbols: Scope
    flags: i32

    allocator: *const Allocator
}

public const builtins = Module{}
public func BuiltinsInit(lita: *Lita) {
    builtins.text = null
    builtins.ast = null
    builtins.flags = 0
    builtins.allocator = lita.allocator
    builtins.symbols.init(ScopeKind.MODULE, null, lita.result, lita.allocator)

    AddBuiltin(lita, &BOOL_TYPE)
    AddBuiltin(lita, &CHAR_TYPE)
    AddBuiltin(lita, &I8_TYPE)
    AddBuiltin(lita, &U8_TYPE)
    AddBuiltin(lita, &I16_TYPE)
    AddBuiltin(lita, &U16_TYPE)
    AddBuiltin(lita, &I32_TYPE)
    AddBuiltin(lita, &U32_TYPE)
    AddBuiltin(lita, &I64_TYPE)
    AddBuiltin(lita, &U64_TYPE)
    AddBuiltin(lita, &F32_TYPE)
    AddBuiltin(lita, &F64_TYPE)
    AddBuiltin(lita, &USIZE_TYPE)
    AddBuiltin(lita, &NULL_TYPE)
    AddBuiltin(lita, &VOID_TYPE)
}

func AddBuiltin(lita: *Lita, type: *TypeInfo) {
    var sym = builtins.symbols.addSymbol(type.name, 
                                        &builtins, 
                                        NewBuiltinDecl(SrcPos{}, SrcPos{}, type, lita.allocator), 
                                        SymbolFlags.IS_BUILTIN|SymbolFlags.IS_TYPE)

    sym.state = SymbolState.RESOLVED
    type.sym = sym
}

public func NewModule(result: *PhaseResult, 
                      allocator: *const Allocator) : *Module {

    var mod = new<Module>(allocator)    
    mod.init(result, allocator)
    return mod
}

public func (this: *Module) init(result: *PhaseResult, 
                                 allocator: *const Allocator) {
    this.text = null
    this.ast = null
    this.symbols.init(ScopeKind.MODULE, &builtins.symbols, result, allocator)
    this.flags = 0
    this.allocator = allocator
}

public func (this: *Module) getType(type: *const char) : *Symbol {
    return this.symbols.lookup(type)
}

public func (this: *Module) importModule(importDecl: *ImportDecl, module: *Module) {
    if(importDecl.alias.type == TokenType.IDENTIFIER) {
        this.importModuleAlias(importDecl.alias.str, module)
    }
    else {
        this.importModuleNormal(module)
    }
}


func (this: *Module) importModuleNormal(module: *Module) {
    for(var i = 0; i < module.symbols.capacity; i += 1) {
        var symName = module.symbols.keys[i]
        var symbol = module.symbols.values[i]
        if(!symName || !symbol) {
            continue
        }

        this.symbols.importSymbol(symName, symbol)
    }
}

func (this: *Module) importModuleAlias(alias: StringView, module: *Module) {
    for(var i = 0; i < module.symbols.capacity; i += 1) {
        var symName = module.symbols.keys[i]
        var symbol = module.symbols.values[i]
        if(!symName || !symbol) {
            continue
        }

        var name = StringBufferInit(MAX_SYMBOL_NAME, this.allocator)
        name.appendStr(alias.buffer, alias.length)
        name.append("::%s", symbol.name)
        this.symbols.importSymbol(name.cStrConst(), symbol)
    }
}

public func (moduleId: *ModuleId) fromFile(lita: *Lita, filename: *const char) {
    var pathStr = StringViewInit(filename);    
    pathStr.copyTo(moduleId.filename, pathStr.length)

    moduleId.packageName = StringViewInit(moduleId.filename, 0)
    moduleId.name = GetModuleName(pathStr)
}

public func GetModuleName(pathStr: StringView) : StringView {
    var endIndex = -1
    var startIndex = -1
    for(var i = pathStr.length - 1; i >= 0; i -= 1) {
        var c = pathStr.buffer[i]
        if(c == '.' && endIndex < 0) {
            endIndex = i
        }
        else if(c == '/') {
            startIndex = i
            break
        }
    }

    if(endIndex < 0 || startIndex < 0 || startIndex > endIndex) {
        return StringView {
            .buffer = 0,
            .length = 0
        }
    }

    return StringView {
        .buffer = pathStr.buffer + startIndex,
        .length = endIndex - startIndex
    }
}

