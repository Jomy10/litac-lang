
import "libc"
import "ast"
import "lex"
import "array"
import "common"

public func PrintTypeSpec(spec: *TypeSpec) {
    if(spec == null) {
        return;
    }

    switch(spec.kind) {
        case TypeSpecKind.NONE: {
            return;
        }
        case TypeSpecKind.ARRAY: {
            var array = spec as (*ArrayTypeSpec)
            printf("[");
            if(array.numElements) {
                PrintStmt(array.numElements)
            }
            printf("]");
            PrintTypeSpec(array.base)
            return;
        }
        case TypeSpecKind.PTR: {
            var ptr = spec as (*PtrTypeSpec)
            printf("*");
            PrintTypeSpec(ptr.base)
            return;
        }
        case TypeSpecKind.CONST: {
            var c = spec as (*ConstTypeSpec)
            printf("const ");
            PrintTypeSpec(c.base)
            return;
        }
        case TypeSpecKind.NAME: {
            var name = spec as (*NameTypeSpec)
            printf("%s", name.name)
            if(!name.genericArgs.empty()) {
                printf("<")
                for(var i = 0; i < name.genericArgs.size(); i += 1) {
                    if(i > 0) printf(",")
                    PrintTypeSpec(name.genericArgs.get(i))
                }
                printf(">")
            }
            return;
        }
        default: {
            Panic("Invalid TypeSpecKind: '%d'\n", spec.kind)
        }
    }
}

func PrintName(tok: Token) {
    printf("%.*s", tok.value.str.length, tok.value.str.buffer)
}

public func PrintStmt(s: *Stmt) {
    switch(s.kind) {
        case StmtKind.IMPORT_DECL: {
            var decl = s as (*ImportDecl)
            printf("import '%.*s'", decl.moduleName.value.str.length, decl.moduleName.value.str.buffer)
            if(decl.alias.type == TokenType.IDENTIFIER) {
                printf("as '%.*s'", decl.alias.value.str.length, decl.alias.value.str.buffer)
            }
            printf("\n")
            return;
        }
        case StmtKind.CONST_DECL: {
            var decl = s as (*ConstDecl)
            printf("const ")
            PrintName(decl.name)
            if(decl.type != null) {
                printf(": ")
                PrintTypeSpec(decl.type)
            }
            if(decl.expr != null) {
                printf(" = ")
                PrintStmt(decl.expr)
            }
            printf(";")
            return;
        }
        case StmtKind.VAR_DECL: {
            var decl = s as (*VarDecl)            
            printf("var ")
            PrintName(decl.name)
            if(decl.type != null) {
                printf(": ")
                PrintTypeSpec(decl.type)
            }
            if(decl.expr != null) {
                printf(" = ")
                PrintStmt(decl.expr)
            }
            printf(";")
            return;
        }
        case StmtKind.STRUCT_DECL: {
            var decl = s as (*AggregateDecl)
            if(decl.attributes.isPublic) {
                printf("public ")
            }            
            printf("struct ")
            PrintName(decl.name)
            if(decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) printf(",")
                    printf("%s", decl.genericParams.get(i).name)
                }
                printf(">")
            }
            printf("{\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                switch(field.kind) {
                    case StmtKind.ENUM_FIELD_STMT: {
                        PrintStmt(field.enumField)
                        break;
                    }
                    case StmtKind.STRUCT_FIELD_STMT: 
                    case StmtKind.UNION_FIELD_STMT: {
                        PrintStmt(field.aggregateField)
                        break;
                    }
                    case StmtKind.VAR_FIELD_STMT: {
                        PrintStmt(field.varField)
                        break;
                    }
                    default:{}
                }
            }
            printf("}")
            return;
        }
        case StmtKind.UNION_DECL: {
            var decl = s as (*AggregateDecl)
            if(decl.attributes.isPublic) {
                printf("public ")
            }            
            printf("union ")
            PrintName(decl.name)
            if(decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) printf(",")
                    printf("%s", decl.genericParams.get(i).name)
                }
                printf(">")
            }
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                switch(field.kind) {
                    case StmtKind.ENUM_FIELD_STMT: {
                        PrintStmt(field.enumField)
                        break;
                    }
                    case StmtKind.STRUCT_FIELD_STMT: 
                    case StmtKind.UNION_FIELD_STMT: {
                        PrintStmt(field.aggregateField)
                        break;
                    }
                    case StmtKind.VAR_FIELD_STMT: {
                        PrintStmt(field.varField)
                        break;
                    }
                    default: {}
                }
            }
            printf("}")
            return;
        }
        case StmtKind.ENUM_DECL: {
            var decl = s as (*EnumDecl)
            if(decl.attributes.isPublic) {
                printf("public ")
            }        
            printf("enum ")
            PrintName(decl.name)        
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                PrintStmt(field)
            }
            printf("}")
            return;
        }
        case StmtKind.FUNC_DECL: {
            var decl = s as (*FuncDecl)
            if(decl.attributes.isPublic) {
                printf("public ")
            }            
            printf("func ")
            PrintName(decl.name)
            if(decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) printf(",")
                    printf("%s", decl.genericParams.get(i).name)
                }
                printf(">")
            }
            printf("(")
            if(decl.params) {
                PrintStmt(decl.params)
            }
            printf(")")
            if(decl.returnType) {
                printf(" : ")
                PrintTypeSpec(decl.returnType)
            }
            if(decl.body) {
                printf(" {\n")
                PrintStmt(decl.body)
                printf("}")
            }
            return;
        }
        case StmtKind.TYPEDEF_DECL: {
            var decl = s as (*TypedefDecl)
            if(decl.attributes.isPublic) {
                printf("public ")
            }
            printf("typedef ")
            PrintTypeSpec(decl.type)
            printf(" as %s", decl.alias)
            return;
        }
        case StmtKind.PARAM_DECL: {
            var decl = s as (*ParameterDecl)            
            PrintName(decl.name)
            printf(": ")
            PrintTypeSpec(decl.type)
            if(decl.defaultExpr) {
                printf(" = ")
                PrintStmt(decl.defaultExpr)
            }
            return;
        }
        /*
        case StmtKind.NATIVE_DECL: {
            // var decl = new<NativeDecl>(allocator)
            // decl.kind = StmtKind.NATIVE_DECL;
            // decl.startPos = startPos
            // decl.type = null
            // return decl as (*Stmt)
            return;
        }

        case StmtKind.BLOCK_STMT: {
            // var stmt = new<BlockStmt>(allocator)
            // stmt.kind = StmtKind.BLOCK_STMT;
            // stmt.startPos = startPos
            // stmt.stmts.init(16, allocator)
            // return stmt as (*Stmt)
        }
        case StmtKind.BREAK_STMT: {
            // var stmt = new<BreakStmt>(allocator)
            // stmt.kind = StmtKind.BREAK_STMT;
            // stmt.startPos = startPos
            // return stmt as (*Stmt)
        }
        case StmtKind.COMP_STMT: {
            // var stmt = new<CompStmt>(allocator)
            // stmt.kind = StmtKind.COMP_STMT;
            // stmt.startPos = startPos
            // stmt.type = null
            // stmt.expr = null
            // stmt.body.init(16, allocator)
            // stmt.end = null
            // stmt.evaluatedStmt = null
            // return stmt as (*Stmt)
        }
        case StmtKind.CONTINUE_STMT: {
            // var stmt = new<ContinueStmt>(allocator)
            // stmt.kind = StmtKind.CONTINUE_STMT;
            // stmt.startPos = startPos
            // return stmt as (*Stmt)
        }
        case StmtKind.DEFER_STMT: {
            // var stmt = new<DeferStmt>(allocator)
            // stmt.kind = StmtKind.DEFER_STMT;
            // stmt.startPos = startPos
            // stmt.deferedStmt = null
            // return stmt as (*Stmt)
        }
        case StmtKind.DO_WHILE_STMT: {
            // var stmt = new<DoWhileStmt>(allocator)
            // stmt.kind = StmtKind.DO_WHILE_STMT;
            // stmt.startPos = startPos
            // stmt.cond = null
            // stmt.body = null
            // return stmt as (*Stmt)
        }
        case StmtKind.EMPTY_STMT: {
            // var stmt = new<EmptyStmt>(allocator)
            // stmt.kind = StmtKind.EMPTY_STMT;
            // stmt.startPos = startPos
            // return stmt as (*Stmt)
        }
        case StmtKind.ENUM_FIELD_ENTRY_STMT: {
            var stmt = new<EnumFieldEntryStmt>(allocator)
            stmt.kind = StmtKind.ENUM_FIELD_ENTRY_STMT;
            stmt.startPos = startPos
            stmt.fieldName = null
            stmt.value = null
            return stmt as (*Stmt)
        }
        case StmtKind.ENUM_FIELD_STMT: {
            var stmt = new<EnumFieldStmt>(allocator)
            stmt.kind = StmtKind.ENUM_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.FOR_STMT: {
            var stmt = new<ForStmt>(allocator)
            stmt.kind = StmtKind.FOR_STMT;
            stmt.startPos = startPos
            stmt.init = null
            stmt.cond = null
            stmt.post = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.FUNC_BODY_STMT: {
            var stmt = new<FuncBodyStmt>(allocator)
            stmt.kind = StmtKind.FUNC_BODY_STMT;
            stmt.startPos = startPos
            stmt.stmts.init(16, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.GOTO_STMT: {
            var stmt = new<GotoStmt>(allocator)
            stmt.kind = StmtKind.GOTO_STMT;
            stmt.startPos = startPos
            stmt.label = null
            return stmt as (*Stmt)
        }
        case StmtKind.IF_STMT: {
            var stmt = new<IfStmt>(allocator)
            stmt.kind = StmtKind.IF_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.then = null
            stmt.elseStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.LABEL_STMT: {
            var stmt = new<LabelStmt>(allocator)
            stmt.kind = StmtKind.LABEL_STMT;
            stmt.startPos = startPos
            stmt.label = null
            return stmt as (*Stmt)
        }*/
        case StmtKind.MODULE_STMT: {
            var stmt = s as (*ModuleStmt)
            for(var i = 0; i < stmt.imports.size(); i += 1) {
                PrintStmt(stmt.imports.get(i))
                printf("\n")
            }

            for(var i = 0; i < stmt.notes.size(); i += 1) {
                PrintStmt(stmt.notes.get(i))
                printf("\n")
            }

            for(var i = 0; i < stmt.declarations.size(); i += 1) {                
                PrintStmt(stmt.declarations.get(i) as (*Stmt))
                printf("\n")
            }
            return;
        }/*
        case StmtKind.NOTE_STMT: {
            var stmt = new<NoteStmt>(allocator)
            stmt.kind = StmtKind.NOTE_STMT;
            stmt.startPos = startPos
            stmt.attributes.init(2, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.PARAMETERS_STMT: {
            var stmt = new<ParametersStmt>(allocator)
            stmt.kind = StmtKind.PARAMETERS_STMT;
            stmt.startPos = startPos
            stmt.params.init(8, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.RETURN_STMT: {
            var stmt = new<ReturnStmt>(allocator)
            stmt.kind = StmtKind.RETURN_STMT;
            stmt.startPos = startPos
            stmt.expr = null
            return stmt as (*Stmt)
        }
        case StmtKind.STRUCT_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.STRUCT_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var stmt = new<SwitchCaseStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_CASE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_STMT: {
            var stmt = new<SwitchStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.stmts.init(16, allocator)
            stmt.defaultStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.UNION_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.UNION_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.VAR_FIELD_STMT: {
            var stmt = new<VarFieldStmt>(allocator)
            stmt.kind = StmtKind.VAR_FIELD_STMT;
            stmt.startPos = startPos
            stmt.fieldName = null
            stmt.type = null
            stmt.defaultExpr = null
            stmt.attributes.isPublic = false
            stmt.attributes.isGlobal = false
            stmt.attributes.notes.init(2, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.WHILE_STMT: {
            var stmt = new<WhileStmt>(allocator)
            stmt.kind = StmtKind.WHILE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }

        case StmtKind.ARRAY_DESIGNATION_EXPR: {
            var expr = new<ArrayDesignationExpr>(allocator)
            expr.kind = StmtKind.ARRAY_DESIGNATION_EXPR;
            expr.startPos = startPos
            expr.index = null
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.ARRAY_INIT_EXPR: {
            var expr = new<ArrayInitExpr>(allocator)
            expr.kind = StmtKind.ARRAY_INIT_EXPR;
            expr.startPos = startPos
            expr.type = null
            expr.values.init(16, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.BINARY_EXPR: {
            var expr = new<BinaryExpr>(allocator)
            expr.kind = StmtKind.BINARY_EXPR;
            expr.startPos = startPos
            expr.left = null
            expr.right = null
            return expr as (*Stmt)
        }
        case StmtKind.BOOLEAN_EXPR: {
            var expr = new<BooleanExpr>(allocator)
            expr.kind = StmtKind.BOOLEAN_EXPR;
            expr.startPos = startPos            
            return expr as (*Stmt)
        }
        case StmtKind.CAST_EXPR: {
            var expr = new<CastExpr>(allocator)
            expr.kind = StmtKind.CAST_EXPR;
            expr.startPos = startPos
            expr.castTo = null
            expr.exprToCast = null
            return expr as (*Stmt)
        }
        case StmtKind.CHAR_EXPR: {
            var expr = new<CharExpr>(allocator)
            expr.kind = StmtKind.CHAR_EXPR;
            expr.startPos = startPos
            expr.character = null
            return expr as (*Stmt)
        }
        case StmtKind.FUNC_CALL_EXPR: {
            var expr = new<FuncCallExpr>(allocator)
            expr.kind = StmtKind.FUNC_CALL_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.arguments.init(16, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.FUNC_IDENTIFIER_EXPR: {
            var expr = new<IdentifierExpr>(allocator)
            expr.kind = StmtKind.FUNC_IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym///            
            return expr as (*Stmt)
        }
        case StmtKind.GET_EXPR: {
            var expr = new<GetExpr>(allocator)
            expr.kind = StmtKind.GET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.field = null
            expr.isMethodCall = false
            return expr as (*Stmt)
        }
        case StmtKind.GROUP_EXPR: {
            var expr = new<GroupExpr>(allocator)
            expr.kind = StmtKind.GROUP_EXPR;
            expr.startPos = startPos
            expr.groupedExpr = null
            return expr as (*Stmt)
        }
        case StmtKind.IDENTIFIER_EXPR: {
            var expr = new<IdentifierExpr>(allocator)
            expr.kind = StmtKind.IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym//
            return expr as (*Stmt)
        }
        case StmtKind.INIT_ARG_EXPR: {
            var expr = new<InitArgExpr>(allocator)
            expr.kind = StmtKind.INIT_ARG_EXPR;
            expr.startPos = startPos
            expr.fieldName = null
            expr.argPosition = 0
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.INIT_EXPR: {
            var expr = new<InitExpr>(allocator)
            expr.kind = StmtKind.INIT_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            expr.arguments.init(8, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.NULL_EXPR: {
            var expr = new<NullExpr>(allocator)
            expr.kind = StmtKind.NULL_EXPR;
            expr.startPos = startPos
            break;
        }*/
        case StmtKind.NUMBER_EXPR: {
            var expr = s as (*NumberExpr)
            switch(expr.number.type) {
                case TokenType.INT_NUMBER: {
                    printf("%llu", expr.number.value.intValue)
                    break;
                }
                case TokenType.FLOAT_NUMBER: {
                    printf("%f", expr.number.value.floatValue)
                    break;
                }
                default: {}
            }
            return;
        }/*
        case StmtKind.OFFSET_OF_EXPR: {
            var expr = new<OffsetOfExpr>(allocator)
            expr.kind = StmtKind.OFFSET_OF_EXPR;
            expr.startPos = startPos
            expr.type = null
            expr.field = null
            return expr as (*Stmt)
        }
        case StmtKind.SET_EXPR: {
            var expr = new<SetExpr>(allocator)
            expr.kind = StmtKind.SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.field = null
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.SIZE_OF_EXPR: {
            var expr = new<SizeOfExpr>(allocator)
            expr.kind = StmtKind.SIZE_OF_EXPR;
            expr.startPos = startPos
            expr.sizeOfExpr = null
            return expr as (*Stmt)
        }
        case StmtKind.STRING_EXPR: {
            var expr = new<StringExpr>(allocator)
            expr.kind = StmtKind.STRING_EXPR;
            expr.startPos = startPos
            expr.string = null
            return expr as (*Stmt)
        }
        case StmtKind.SUBSCRIPT_GET_EXPR: {
            var expr = new<SubscriptGetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_GET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            return expr as (*Stmt);
        }
        case StmtKind.SUBSCRIPT_SET_EXPR: {
            var expr = new<SubscriptSetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            expr.value = null
            return expr as (*Stmt);
        }
        case StmtKind.TERNARY_EXPR: {
            var expr = new<TernaryExpr>(allocator)
            expr.kind = StmtKind.TERNARY_EXPR;
            expr.startPos = startPos
            expr.cond = null
            expr.then = null
            expr.other = null
            return expr as (*Stmt);
        }
        case StmtKind.TYPE_IDENTIFIER_EXPR: {
            var expr = new<TypeIdentifierExpr>(allocator)
            expr.kind = StmtKind.TYPE_IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym//
            return expr as (*Stmt);
        }
        case StmtKind.TYPE_OF_EXPR: {
            var expr = new<TypeOfExpr>(allocator)
            expr.kind = StmtKind.TYPE_OF_EXPR;
            expr.startPos = startPos
            expr.typeOfExpr = null
            expr.type = null
            return expr as (*Stmt);
        }
        case StmtKind.UNARY_EXPR: {
            var expr = new<UnaryExpr>(allocator)
            expr.kind = StmtKind.UNARY_EXPR;
            expr.startPos = startPos
            expr.unaryExpr = null
            return expr as (*Stmt);
        }*/
        default: {
            // TODO: Error
            //Panic("Unknown statement kind: %d", kind)
        }
    }    
}