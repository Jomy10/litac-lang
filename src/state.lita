import "mem"
import "phase_result"
import "array"
import "map"
import "module"
import "string_view"
import "system"

public struct Lita {
    allocator: *const Allocator // TODO proper arena allocator
    result: PhaseResult
    modules: Map<*const char, *Module>
    metrics: [MetricType.MAX_METRIC_TYPES]Metric
    
    totalSourceLines: u32
    totalAllocations: u32

    options: *LitaOptions
}

public enum MetricType {
    PARSING,
    TYPE_CHECKING,
    CGEN,
    CWRITE,
    CCOMPILE,

    MAX_METRIC_TYPES
}

public struct Metric {
    bytesAllocated: usize
    allocationCount: u32
    executionTime: f64

    startTime: f64    
}

public struct LitaOptions {
    srcPath: [MAX_PATH]char        // the directory of where the main source module is
    libPath: [MAX_PATH]char        // optional configurable path to modules for libraries
    litaPath: [MAX_PATH]char       // the LITAC_HOME environment variable for standard lita modules

    inputFile: [MAX_PATH]char      // the input source file
}

var linearAllocator = LinearAllocator{}

public func LitaInit(options: *LitaOptions) : Lita {    
    //debugAllocator.init()
    var size: usize = 1024 * 1024 * 500;
    linearAllocator.init(defaultAllocator.alloc(size), size)

    var c = Lita {
        .allocator = (&linearAllocator) as (*const Allocator),
        .options = options,
        .totalSourceLines = 0,
        .totalAllocations = 0,
        
    }
    c.result = PhaseResultInit(c.allocator)
    c.modules = StrMap<*Module>(null, 32, c.allocator)
    return c
}

public func (lita: *Lita) free() {    
    var allocator = lita.allocator as (*LinearAllocator)    
    defaultAllocator.free(allocator.mem)
    /*
    for(var i = 0; i < allocator.allocations.size(); i += 1) {
        var a = allocator.allocations.get(i)
        allocator.decorated.free(a.addr)
        allocator.decorated.free(a)
    }
    debugAllocator.free()
    */
}

public func (lita: *Lita) addModule(module: *Module) {
    lita.modules.put(module.id.filename, module)        
}

public func (lita: *Lita) startCapture(type: MetricType) {
    var metric = &lita.metrics[type]
    
    var allocator = lita.allocator as (*LinearAllocator)    
    metric.bytesAllocated = allocator.totalBytesAllocated
    metric.allocationCount = allocator.totalAllocations
    metric.startTime = SystemTimeMSec()
}

public func (lita: *Lita) endCapture(type: MetricType) {
    var metric = &lita.metrics[type]

    var allocator = lita.allocator as (*LinearAllocator)    
    metric.bytesAllocated = allocator.totalBytesAllocated - metric.bytesAllocated
    metric.allocationCount = allocator.totalAllocations - metric.allocationCount
    metric.executionTime = SystemTimeMSec() - metric.executionTime
}