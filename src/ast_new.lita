import "ast"
import "lex"
import "symbols"
import "types"
import "mem"
import "array"
import "common"
import "assert"

public func NewVoidTypeSpec(pos: SrcPos, allocator: *const Allocator) : *TypeSpec {
    var voidSpec = NewTypeSpec(TypeSpecKind.NAME, pos, allocator) as (*NameTypeSpec)
    voidSpec.name = "void" // TODO: Should this be allocated memory?
    return voidSpec as (*TypeSpec)
}

public func NewTypeSpec(kind: TypeSpecKind, pos: SrcPos, allocator: *const Allocator) : *TypeSpec {
    switch(kind) {
        case TypeSpecKind.NONE: {
            var result = new<TypeSpec>(allocator)
            result.kind = TypeSpecKind.NONE
            result.pos = pos
            result.base = null
            return result
        }
        case TypeSpecKind.ARRAY: {
            var result = new<ArrayTypeSpec>(allocator)
            result.kind = TypeSpecKind.ARRAY
            result.pos = pos
            result.base = null
            result.numElements = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.PTR: {
            var result = new<PtrTypeSpec>(allocator)
            result.kind = TypeSpecKind.PTR            
            result.pos = pos
            result.base = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.CONST: {
            var result = new<ConstTypeSpec>(allocator)
            result.kind = TypeSpecKind.CONST
            result.pos = pos
            result.base = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.NAME: {
            var result = new<NameTypeSpec>(allocator)
            result.kind = TypeSpecKind.NAME
            result.pos = pos
            result.base = null
            result.name = null
            result.genericArgs.init(0, allocator)
            return result as (*TypeSpec)
        }
        case TypeSpecKind.FUNC_PTR: {
            var result = new<FuncPtrTypeSpec>(allocator)
            result.kind = TypeSpecKind.NAME
            result.pos = pos
            result.base = null
            result.args.init(0, allocator)
            result.ret = null
            result.hasVarargs = false
            result.genericParams.init(0, allocator)
            return result as (*TypeSpec)
        }
        default: {
            Panic("Invalid TypeSpecKind: '%d'\n", kind)
        }
    }

    return null
}

public func NewImportDecl(startPos: SrcPos, 
                          endPos: SrcPos, 
                          name: Token,
                          alias: Token,
                          isUsing: bool,
                          allocator: *const Allocator) : *Decl {                              
    var decl = new<ImportDecl>(allocator)
    decl.kind = StmtKind.IMPORT_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.alias = alias
    decl.isUsing = isUsing

    return decl as (*Decl)
}

public func NewVarDecl(startPos: SrcPos, 
                       endPos: SrcPos, 
                       name: Token,
                       type: *TypeSpec,
                       expr: *Expr,
                       allocator: *const Allocator) : *Decl {                              
    var decl = new<VarDecl>(allocator)
    decl.kind = StmtKind.VAR_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.type = type
    decl.expr = expr

    return decl as (*Decl)
}

public func NewConstDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token, 
                         type: *TypeSpec,
                         expr: *Expr,
                         allocator: *const Allocator) : *Decl {                              
    var decl = new<ConstDecl>(allocator)
    decl.kind = StmtKind.CONST_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.type = type
    decl.expr = expr

    return decl as (*Decl)
}


public func NewFuncDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token,
                         genericParams: Array<GenericParam>,
                         params: *ParametersStmt,
                         body: *Stmt,
                         returnType: *TypeSpec,
                         flags: i32,
                         allocator: *const Allocator) : *Decl {                              
    var decl = new<FuncDecl>(allocator)
    decl.kind = StmtKind.FUNC_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.genericParams = genericParams
    decl.params = decl.node.becomeParentOf(params)
    decl.body = decl.node.becomeParentOf(body)
    decl.returnType = returnType
    decl.flags = flags

    return decl as (*Decl)
}

func NewAggregateDecl(startPos: SrcPos, 
                      endPos: SrcPos,
                      name: Token,
                      genericParams: Array<GenericParam>,
                      fields: Array<*FieldStmt>,
                      flags: i32,
                      allocator: *const Allocator) : *Decl {                              
    var decl = new<AggregateDecl>(allocator)    
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.genericParams = genericParams
    decl.fields = fields
    decl.flags = flags

    for(var i = 0; i < fields.size(); i += 1) {
        var field = fields.get(i)
        switch(field.kind) {
            case StmtKind.ENUM_FIELD_STMT: {
                decl.node.becomeParentOf(field.enumField)
                break
            }
            case StmtKind.UNION_FIELD_STMT:
            case StmtKind.STRUCT_FIELD_STMT: {
                decl.node.becomeParentOf(field.aggregateField)
                break
            }
            case StmtKind.VAR_FIELD_STMT: {
                decl.node.becomeParentOf(field.varField)
                break
            }
            default: {
                assert(false)
            }
        }
    }

    return decl as (*Decl)
}

public func NewStructDecl(startPos: SrcPos, 
                          endPos: SrcPos,
                          name: Token,
                          genericParams: Array<GenericParam>,
                          fields: Array<*FieldStmt>,
                          flags: i32,
                          allocator: *const Allocator) : *Decl {  
    var aggregate = NewAggregateDecl(startPos, endPos, name, genericParams, fields, flags, allocator)
    aggregate.kind = StmtKind.STRUCT_DECL;
    return aggregate
}

public func NewUnionDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token,
                         genericParams: Array<GenericParam>,
                         fields: Array<*FieldStmt>,
                         flags: i32,
                         allocator: *const Allocator) : *Decl {                                  
    
    var aggregate = NewAggregateDecl(startPos, endPos, name, genericParams, fields, flags, allocator)
    aggregate.kind = StmtKind.UNION_DECL;
    return aggregate
}

public func NewEnumDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token,
                         fields: Array<*EnumFieldEntryStmt>,
                         allocator: *const Allocator) : *Decl {                              
    var decl = new<EnumDecl>(allocator)
    decl.kind = StmtKind.ENUM_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name    
    decl.fields = *decl.node.becomeParentOfChildren(fields)

    return decl as (*Decl)
}

public func NewTypedefDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token,
                         type: *TypeSpec,                         
                         allocator: *const Allocator) : *Decl {                              
    var decl = new<TypedefDecl>(allocator)
    decl.kind = StmtKind.TYPEDEF_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name    
    decl.type = type

    return decl as (*Decl)
}

public func NewParameterDecl(startPos: SrcPos, 
                         endPos: SrcPos,
                         name: Token,
                         type: *TypeSpec,
                         defaultExpr: *Expr,
                         isUsing: bool,
                         allocator: *const Allocator) : *Decl {                              
    var decl = new<ParameterDecl>(allocator)
    decl.kind = StmtKind.PARAM_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name    
    decl.type = type
    decl.defaultExpr = decl.node.becomeParentOf(defaultExpr)
    decl.attributes.isUsing = isUsing

    return decl as (*Decl)
}

public func NewTernaryExpr(startPos: SrcPos, 
                           endPos: SrcPos, 
                           cond: *Expr,                            
                           then: *Expr, 
                           other: *Expr,
                           allocator: *const Allocator) : *Expr {                              
    var expr = new<TernaryExpr>(allocator)
    expr.kind = StmtKind.TERNARY_EXPR;
    expr.startPos = startPos
    expr.endPos = endPos
    expr.cond = expr.node.becomeParentOf(cond)    
    expr.then = expr.node.becomeParentOf(then)    
    expr.other = expr.node.becomeParentOf(other)

    return expr as (*Expr)
}

public func NewBinaryExpr(startPos: SrcPos, 
                          endPos: SrcPos, 
                          left: *Expr, 
                          operator: TokenType,
                          right: *Expr, 
                          allocator: *const Allocator) : *Expr {                              
    var binExpr = new<BinaryExpr>(allocator)
    binExpr.kind = StmtKind.BINARY_EXPR;
    binExpr.startPos = startPos
    binExpr.left = binExpr.node.becomeParentOf(left)
    binExpr.operator = operator
    binExpr.right = binExpr.node.becomeParentOf(right)
    binExpr.endPos = endPos

    return binExpr as (*Expr)
}

public func NewUnaryExpr(startPos: SrcPos, 
                         endPos: SrcPos, 
                         operator: TokenType,
                         expr: *Expr,
                         allocator: *const Allocator) : *Expr {                              
    var unaryExpr = new<UnaryExpr>(allocator)
    unaryExpr.kind = StmtKind.UNARY_EXPR;
    unaryExpr.startPos = startPos
    unaryExpr.unaryExpr = unaryExpr.node.becomeParentOf(expr)
    unaryExpr.operator = operator    
    unaryExpr.endPos = endPos

    return unaryExpr as (*Expr)
}

public func NewInitExpr(startPos: SrcPos,
                        endPos: SrcPos,
                        type: *NameTypeSpec,
                        arguments: Array<*InitArgExpr>,
                        allocator: *const Allocator) : *Expr {
    var initExpr = new<InitExpr>(allocator)
    initExpr.kind = StmtKind.INIT_EXPR
    initExpr.startPos = startPos
    initExpr.endPos = endPos
    initExpr.type = type
    initExpr.arguments = arguments
    initExpr.node.becomeParentOfChildren(initExpr.arguments)

    return initExpr as (*Expr)
}

public func NewFuncCallExpr(startPos: SrcPos,
                            endPos: SrcPos,
                            object: *Expr,
                            arguments: Array<*Expr>,
                            genericArgs: Array<*TypeSpec>,
                            allocator: *const Allocator) : *Expr {
    var expr = new<FuncCallExpr>(allocator)
    expr.kind = StmtKind.FUNC_CALL_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.node.becomeParentOfChildren(expr.arguments)
    expr.genericArgs = genericArgs

    return expr as (*Expr)
}

public func NewSubscriptGetExpr(startPos: SrcPos,
                                endPos: SrcPos,
                                object: *Expr,
                                index: *Expr,
                                allocator: *const Allocator) : *Expr {
    var expr = new<SubscriptGetExpr>(allocator)
    expr.kind = StmtKind.SUBSCRIPT_GET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.index = expr.node.becomeParentOf(index)

    return expr as (*Expr)
}

public func NewSubscriptSetExpr(startPos: SrcPos,
                                endPos: SrcPos,
                                object: *Expr,
                                index: *Expr,
                                operator: TokenType,
                                value: *Expr,
                                allocator: *const Allocator) : *Expr {
    var expr = new<SubscriptSetExpr>(allocator)
    expr.kind = StmtKind.SUBSCRIPT_SET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.index = expr.node.becomeParentOf(index)
    expr.operator = operator
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewGetExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       object: *Expr,
                       field: *IdentifierExpr,
                       allocator: *const Allocator) : *Expr {
    var expr = new<GetExpr>(allocator)
    expr.kind = StmtKind.GET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.field = expr.node.becomeParentOf(field) as (*IdentifierExpr)

    return expr as (*Expr)
}

public func NewSetExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       object: *Expr,
                       field: *IdentifierExpr,
                       operator: TokenType,
                       value: *Expr,
                       allocator: *const Allocator) : *Expr {
    var expr = new<SetExpr>(allocator)
    expr.kind = StmtKind.SET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.field = expr.node.becomeParentOf(field) as (*IdentifierExpr)
    expr.operator = operator
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewIdentifierExpr(startPos: SrcPos,
                              endPos: SrcPos,                              
                              type: *NameTypeSpec,
                              allocator: *const Allocator) : *Expr {
    var expr = new<IdentifierExpr>(allocator)
    expr.kind = StmtKind.IDENTIFIER_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.type = type

    return expr as (*Expr)
}

public func NewCastExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       castExpr: *Expr,
                       castTo: *TypeSpec,
                       allocator: *const Allocator) : *Expr {
    var expr = new<CastExpr>(allocator)
    expr.kind = StmtKind.CAST_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.exprToCast = expr.node.becomeParentOf(castExpr)
    expr.castTo = castTo

    return expr as (*Expr)
}

public func NewArrayDesignationExpr(startPos: SrcPos,
                                    endPos: SrcPos,
                                    index: *Expr,
                                    value: *Expr,
                                    allocator: *const Allocator) : *Expr {
    var expr = new<ArrayDesignationExpr>(allocator)
    expr.kind = StmtKind.ARRAY_DESIGNATION_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.index = expr.node.becomeParentOf(index)
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewInitArgExpr(startPos: SrcPos,
                           endPos: SrcPos,
                           fieldName: Token,
                           position: i32,
                           value: *Expr,
                           allocator: *const Allocator) : *Expr {
    var expr = new<InitArgExpr>(allocator)
    expr.kind = StmtKind.INIT_ARG_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.fieldName = fieldName
    expr.argPosition = position
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewBooleanExpr(startPos: SrcPos,
                           endPos: SrcPos,
                           boolean: bool,
                           allocator: *const Allocator) : *Expr {
    var expr = new<BooleanExpr>(allocator)
    expr.kind = StmtKind.BOOLEAN_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.boolean = boolean
    return expr as (*Expr)
}

public func NewNullExpr(startPos: SrcPos,
                        endPos: SrcPos,                          
                        allocator: *const Allocator) : *Expr {
    var expr = new<NullExpr>(allocator)
    expr.kind = StmtKind.NULL_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    return expr as (*Expr)
}

public func NewNumberExpr(startPos: SrcPos,
                          endPos: SrcPos,                          
                          number: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<NumberExpr>(allocator)
    expr.kind = StmtKind.NUMBER_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.number = number
    return expr as (*Expr)
}

public func NewStringExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          string: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<StringExpr>(allocator)
    expr.kind = StmtKind.STRING_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.string = string
    return expr as (*Expr)
}


public func NewCharExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          character: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<CharExpr>(allocator)
    expr.kind = StmtKind.CHAR_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.character = character
    return expr as (*Expr)
}

public func NewPoisonExpr(startPos: SrcPos,
                          endPos: SrcPos,                          
                          allocator: *const Allocator) : *Expr {
    var expr = new<PoisonExpr>(allocator)
    expr.kind = StmtKind.POISON_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    return expr as (*Expr)
}

public func NewModuleStmt(startPos: SrcPos,
                          endPos: SrcPos,
                          imports: Array<*ImportDecl>,
                          notes: Array<*NoteStmt>,
                          declarations: Array<*Decl>,
                          allocator: *const Allocator) : *Stmt {
    var stmt = new<ModuleStmt>(allocator)
    stmt.kind = StmtKind.MODULE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.imports = imports
    stmt.notes = notes
    stmt.declarations = declarations
    return stmt as (*Stmt)
}

public func NewBlockStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         stmts: Array<*Stmt>,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<BlockStmt>(allocator)
    stmt.kind = StmtKind.BLOCK_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.stmts = *stmt.node.becomeParentOfChildren(stmts)
    return stmt as (*Stmt)
}

public func NewIfStmt(startPos: SrcPos,
                      endPos: SrcPos,
                      cond: *Expr,
                      then: *Stmt,
                      other: *Stmt,
                      allocator: *const Allocator) : *Stmt {
    var stmt = new<IfStmt>(allocator)
    stmt.kind = StmtKind.IF_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.then = stmt.node.becomeParentOf(then)
    stmt.elseStmt = stmt.node.becomeParentOf(other)
    return stmt as (*Stmt)
}


public func NewWhileStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         cond: *Expr,                          
                         body: *Stmt,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<WhileStmt>(allocator)
    stmt.kind = StmtKind.WHILE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.body = stmt.node.becomeParentOf(body)    
    return stmt as (*Stmt)
}

public func NewDoWhileStmt(startPos: SrcPos,
                           endPos: SrcPos,
                           cond: *Expr,                          
                           body: *Stmt,
                           allocator: *const Allocator) : *Stmt {
    var stmt = new<DoWhileStmt>(allocator)
    stmt.kind = StmtKind.DO_WHILE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.body = stmt.node.becomeParentOf(body)    
    return stmt as (*Stmt)
}

public func NewForStmt(startPos: SrcPos,
                       endPos: SrcPos,
                       init: *Stmt,
                       cond: *Expr,
                       post: *Stmt,                          
                       body: *Stmt,
                       allocator: *const Allocator) : *Stmt {
    var stmt = new<ForStmt>(allocator)
    stmt.kind = StmtKind.FOR_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.init = stmt.node.becomeParentOf(init)
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.post = stmt.node.becomeParentOf(post)
    stmt.body = stmt.node.becomeParentOf(body)    
    return stmt as (*Stmt)
}

public func NewSwitchCaseStmt(startPos: SrcPos,
                              endPos: SrcPos,                              
                              cond: *Expr,                                               
                              body: *Stmt,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<SwitchCaseStmt>(allocator)
    stmt.kind = StmtKind.SWITCH_CASE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos    
    stmt.cond = stmt.node.becomeParentOf(cond)    
    stmt.body = stmt.node.becomeParentOf(body)    
    return stmt as (*Stmt)
}

public func NewSwitchStmt(startPos: SrcPos,
                              endPos: SrcPos,                              
                              cond: *Expr,
                              cases: Array<*SwitchCaseStmt>,
                              defaultStmt: *Stmt,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<SwitchStmt>(allocator)
    stmt.kind = StmtKind.SWITCH_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos    
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.cases = *stmt.node.becomeParentOfChildren(cases)
    stmt.defaultStmt = stmt.node.becomeParentOf(defaultStmt)    
    return stmt as (*Stmt)
}

public func NewBreakStmt(startPos: SrcPos,
                         endPos: SrcPos,                                                  
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<BreakStmt>(allocator)
    stmt.kind = StmtKind.BREAK_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewContinueStmt(startPos: SrcPos,
                            endPos: SrcPos,                                                     
                            allocator: *const Allocator) : *Stmt {
    var stmt = new<ContinueStmt>(allocator)
    stmt.kind = StmtKind.CONTINUE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewReturnStmt(startPos: SrcPos,
                          endPos: SrcPos,                              
                          expr: *Expr,
                          allocator: *const Allocator) : *Stmt {
    var stmt = new<ReturnStmt>(allocator)
    stmt.kind = StmtKind.RETURN_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos    
    stmt.expr = stmt.node.becomeParentOf(expr)
    return stmt as (*Stmt)
}

public func NewDeferStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         defered: *Stmt,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<DeferStmt>(allocator)
    stmt.kind = StmtKind.DEFER_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos    
    stmt.deferedStmt = stmt.node.becomeParentOf(defered)
    return stmt as (*Stmt)
}

public func NewGotoStmt(startPos: SrcPos,
                        endPos: SrcPos,                              
                        label: Token,
                        allocator: *const Allocator) : *Stmt {
    var stmt = new<GotoStmt>(allocator)
    stmt.kind = StmtKind.GOTO_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.label = label
    return stmt as (*Stmt)
}

public func NewLabelStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         label: Token,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<LabelStmt>(allocator)
    stmt.kind = StmtKind.LABEL_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.label = label
    return stmt as (*Stmt)
}

public func NewNoteStmt(startPos: SrcPos,
                        endPos: SrcPos,
                        name: Token,
                        attributes: Array<Token>,
                        allocator: *const Allocator) : *Stmt {
    var stmt = new<NoteStmt>(allocator)
    stmt.kind = StmtKind.NOTE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.name = name
    stmt.attributes = attributes
    return stmt as (*Stmt)
}

public func NewEmptyStmt(startPos: SrcPos,
                         endPos: SrcPos,                                                     
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<EmptyStmt>(allocator)
    stmt.kind = StmtKind.EMPTY_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewParametersStmt(startPos: SrcPos,
                              endPos: SrcPos,
                              params: Array<*ParameterDecl>,
                              isVararg: bool,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<ParametersStmt>(allocator)
    stmt.kind = StmtKind.PARAMETERS_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.params = *stmt.node.becomeParentOfChildren(params)
    stmt.isVararg = isVararg
    return stmt as (*Stmt)
}

/*
public func NewStmt(kind: StmtKind, startPos: SrcPos, allocator: *const Allocator) : *Stmt {
    switch(kind) {
        case StmtKind.IMPORT_DECL: {
            var decl = new<ImportDecl>(allocator)
            decl.kind = StmtKind.IMPORT_DECL;
            decl.startPos = startPos
            decl.moduleName.type = TokenType.END_OF_FILE            
            decl.alias.type = TokenType.END_OF_FILE
            decl.isUsing = false
            //stmt.moduleId ??
            return decl as (*Stmt)
        }
        case StmtKind.CONST_DECL: {
            var decl = new<ConstDecl>(allocator)
            decl.kind = StmtKind.CONST_DECL;
            decl.startPos = startPos
            decl.expr = null
            decl.type = null
            return decl as (*Stmt)
        }
        case StmtKind.VAR_DECL: {
            var decl = new<VarDecl>(allocator)
            decl.kind = StmtKind.VAR_DECL;
            decl.startPos = startPos
            decl.expr = null
            decl.type = null
            return decl as (*Stmt)
        }
        case StmtKind.STRUCT_DECL: {
            var decl = new<AggregateDecl>(allocator)
            decl.kind = StmtKind.STRUCT_DECL;
            decl.startPos = startPos
            decl.genericParams.init(6, allocator)
            decl.fields.init(16, allocator)
            decl.flags = 0
            return decl as (*Stmt)
        }
        case StmtKind.UNION_DECL: {
            var decl = new<AggregateDecl>(allocator)
            decl.kind = StmtKind.UNION_DECL;
            decl.startPos = startPos
            decl.genericParams.init(6, allocator)
            decl.fields.init(16, allocator)
            decl.flags = 0
            return decl as (*Stmt)
        }
        case StmtKind.ENUM_DECL: {
            var decl = new<EnumDecl>(allocator)
            decl.kind = StmtKind.ENUM_DECL;
            decl.startPos = startPos            
            decl.fields.init(16, allocator)            
            return decl as (*Stmt)
        }
        case StmtKind.FUNC_DECL: {
            var decl = new<FuncDecl>(allocator)
            decl.kind = StmtKind.FUNC_DECL;
            decl.startPos = startPos
            decl.genericParams.init(6, allocator)
            decl.params = null
            decl.body = null
            decl.returnType = null
            decl.flags = 0
            return decl as (*Stmt)
        }
        case StmtKind.TYPEDEF_DECL: {
            var decl = new<TypedefDecl>(allocator)
            decl.kind = StmtKind.TYPEDEF_DECL;
            decl.startPos = startPos
            decl.type = null
            decl.alias = null
            return decl as (*Stmt)
        }
        case StmtKind.PARAM_DECL: {
            var decl = new<ParameterDecl>(allocator)
            decl.kind = StmtKind.PARAM_DECL;
            decl.startPos = startPos
            decl.type = null
            decl.defaultExpr = null
            return decl as (*Stmt)
        }
        case StmtKind.NATIVE_DECL: {
            var decl = new<NativeDecl>(allocator)
            decl.kind = StmtKind.NATIVE_DECL;
            decl.startPos = startPos
            decl.type = null
            return decl as (*Stmt)
        }

        case StmtKind.BLOCK_STMT: {
            var stmt = new<BlockStmt>(allocator)
            stmt.kind = StmtKind.BLOCK_STMT;
            stmt.startPos = startPos
            stmt.stmts.init(16, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.BREAK_STMT: {
            var stmt = new<BreakStmt>(allocator)
            stmt.kind = StmtKind.BREAK_STMT;
            stmt.startPos = startPos
            return stmt as (*Stmt)
        }
        case StmtKind.COMP_STMT: {
            var stmt = new<CompStmt>(allocator)
            stmt.kind = StmtKind.COMP_STMT;
            stmt.startPos = startPos
            stmt.type = null
            stmt.expr = null
            stmt.body.init(16, allocator)
            stmt.end = null
            stmt.evaluatedStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.CONTINUE_STMT: {
            var stmt = new<ContinueStmt>(allocator)
            stmt.kind = StmtKind.CONTINUE_STMT;
            stmt.startPos = startPos
            return stmt as (*Stmt)
        }
        case StmtKind.DEFER_STMT: {
            var stmt = new<DeferStmt>(allocator)
            stmt.kind = StmtKind.DEFER_STMT;
            stmt.startPos = startPos
            stmt.deferedStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.DO_WHILE_STMT: {
            var stmt = new<DoWhileStmt>(allocator)
            stmt.kind = StmtKind.DO_WHILE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.EMPTY_STMT: {
            var stmt = new<EmptyStmt>(allocator)
            stmt.kind = StmtKind.EMPTY_STMT;
            stmt.startPos = startPos
            return stmt as (*Stmt)
        }
        case StmtKind.ENUM_FIELD_ENTRY_STMT: {
            var stmt = new<EnumFieldEntryStmt>(allocator)
            stmt.kind = StmtKind.ENUM_FIELD_ENTRY_STMT;
            stmt.startPos = startPos
            stmt.fieldName = null
            stmt.value = null
            return stmt as (*Stmt)
        }
        case StmtKind.ENUM_FIELD_STMT: {
            var stmt = new<EnumFieldStmt>(allocator)
            stmt.kind = StmtKind.ENUM_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.FOR_STMT: {
            var stmt = new<ForStmt>(allocator)
            stmt.kind = StmtKind.FOR_STMT;
            stmt.startPos = startPos
            stmt.init = null
            stmt.cond = null
            stmt.post = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.FUNC_BODY_STMT: {
            var stmt = new<FuncBodyStmt>(allocator)
            stmt.kind = StmtKind.FUNC_BODY_STMT;
            stmt.startPos = startPos
            stmt.stmts.init(16, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.GOTO_STMT: {
            var stmt = new<GotoStmt>(allocator)
            stmt.kind = StmtKind.GOTO_STMT;
            stmt.startPos = startPos
            stmt.label = null
            return stmt as (*Stmt)
        }
        case StmtKind.IF_STMT: {
            var stmt = new<IfStmt>(allocator)
            stmt.kind = StmtKind.IF_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.then = null
            stmt.elseStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.LABEL_STMT: {
            var stmt = new<LabelStmt>(allocator)
            stmt.kind = StmtKind.LABEL_STMT;
            stmt.startPos = startPos
            stmt.label = null
            return stmt as (*Stmt)
        }
        case StmtKind.MODULE_STMT: {
            var stmt = new<ModuleStmt>(allocator)
            stmt.kind = StmtKind.MODULE_STMT;
            stmt.startPos = startPos
            stmt.imports.init(16, allocator)
            stmt.notes.init(8, allocator)
            stmt.declarations.init(16, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.NOTE_STMT: {
            var stmt = new<NoteStmt>(allocator)
            stmt.kind = StmtKind.NOTE_STMT;
            stmt.startPos = startPos
            stmt.attributes.init(2, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.PARAMETERS_STMT: {
            var stmt = new<ParametersStmt>(allocator)
            stmt.kind = StmtKind.PARAMETERS_STMT;
            stmt.startPos = startPos
            stmt.params.init(8, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.RETURN_STMT: {
            var stmt = new<ReturnStmt>(allocator)
            stmt.kind = StmtKind.RETURN_STMT;
            stmt.startPos = startPos
            stmt.expr = null
            return stmt as (*Stmt)
        }
        case StmtKind.STRUCT_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.STRUCT_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var stmt = new<SwitchCaseStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_CASE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_STMT: {
            var stmt = new<SwitchStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.cases.init(16, allocator)
            stmt.defaultStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.UNION_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.UNION_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.VAR_FIELD_STMT: {
            var stmt = new<VarFieldStmt>(allocator)
            stmt.kind = StmtKind.VAR_FIELD_STMT;
            stmt.startPos = startPos
            stmt.fieldName = null
            stmt.type = null
            stmt.defaultExpr = null
            stmt.attributes.isPublic = false
            stmt.attributes.isGlobal = false
            stmt.attributes.notes.init(2, allocator)
            return stmt as (*Stmt)
        }
        case StmtKind.WHILE_STMT: {
            var stmt = new<WhileStmt>(allocator)
            stmt.kind = StmtKind.WHILE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }

        case StmtKind.ARRAY_DESIGNATION_EXPR: {
            var expr = new<ArrayDesignationExpr>(allocator)
            expr.kind = StmtKind.ARRAY_DESIGNATION_EXPR;
            expr.startPos = startPos
            expr.index = null
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.ARRAY_INIT_EXPR: {
            var expr = new<ArrayInitExpr>(allocator)
            expr.kind = StmtKind.ARRAY_INIT_EXPR;
            expr.startPos = startPos
            expr.type = null
            expr.values.init(16, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.BINARY_EXPR: {
            var expr = new<BinaryExpr>(allocator)
            expr.kind = StmtKind.BINARY_EXPR;
            expr.startPos = startPos
            expr.left = null
            expr.right = null
            return expr as (*Stmt)
        }
        case StmtKind.BOOLEAN_EXPR: {
            var expr = new<BooleanExpr>(allocator)
            expr.kind = StmtKind.BOOLEAN_EXPR;
            expr.startPos = startPos            
            return expr as (*Stmt)
        }
        case StmtKind.CAST_EXPR: {
            var expr = new<CastExpr>(allocator)
            expr.kind = StmtKind.CAST_EXPR;
            expr.startPos = startPos
            expr.castTo = null
            expr.exprToCast = null
            return expr as (*Stmt)
        }
        case StmtKind.CHAR_EXPR: {
            var expr = new<CharExpr>(allocator)
            expr.kind = StmtKind.CHAR_EXPR;
            expr.startPos = startPos
            //expr.character = null
            return expr as (*Stmt)
        }
        case StmtKind.FUNC_CALL_EXPR: {
            var expr = new<FuncCallExpr>(allocator)
            expr.kind = StmtKind.FUNC_CALL_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.arguments.init(16, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.FUNC_IDENTIFIER_EXPR: {
            var expr = new<IdentifierExpr>(allocator)
            expr.kind = StmtKind.FUNC_IDENTIFIER_EXPR;
            expr.startPos = startPos
            //expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym///            
            return expr as (*Stmt)
        }
        case StmtKind.GET_EXPR: {
            var expr = new<GetExpr>(allocator)
            expr.kind = StmtKind.GET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.field = null
            expr.isMethodCall = false
            return expr as (*Stmt)
        }
        case StmtKind.GROUP_EXPR: {
            var expr = new<GroupExpr>(allocator)
            expr.kind = StmtKind.GROUP_EXPR;
            expr.startPos = startPos
            expr.groupedExpr = null
            return expr as (*Stmt)
        }
        case StmtKind.IDENTIFIER_EXPR: {
            var expr = new<IdentifierExpr>(allocator)
            expr.kind = StmtKind.IDENTIFIER_EXPR;
            expr.startPos = startPos
            //expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym//
            return expr as (*Stmt)
        }
        case StmtKind.INIT_ARG_EXPR: {
            var expr = new<InitArgExpr>(allocator)
            expr.kind = StmtKind.INIT_ARG_EXPR;
            expr.startPos = startPos
            //expr.fieldName = null
            expr.argPosition = 0
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.INIT_EXPR: {
            var expr = new<InitExpr>(allocator)
            expr.kind = StmtKind.INIT_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            expr.arguments.init(8, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.NULL_EXPR: {
            var expr = new<NullExpr>(allocator)
            expr.kind = StmtKind.NULL_EXPR;
            expr.startPos = startPos
            break;
        }
        case StmtKind.NUMBER_EXPR: {
            var expr = new<NumberExpr>(allocator)
            expr.kind = StmtKind.NUMBER_EXPR;
            expr.startPos = startPos
            //expr.number = null
            return expr as (*Stmt)
        }
        case StmtKind.OFFSET_OF_EXPR: {
            var expr = new<OffsetOfExpr>(allocator)
            expr.kind = StmtKind.OFFSET_OF_EXPR;
            expr.startPos = startPos
            expr.type = null
            expr.field = null
            return expr as (*Stmt)
        }
        case StmtKind.SET_EXPR: {
            var expr = new<SetExpr>(allocator)
            expr.kind = StmtKind.SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.field = null
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.SIZE_OF_EXPR: {
            var expr = new<SizeOfExpr>(allocator)
            expr.kind = StmtKind.SIZE_OF_EXPR;
            expr.startPos = startPos
            expr.sizeOfExpr = null
            return expr as (*Stmt)
        }
        case StmtKind.STRING_EXPR: {
            var expr = new<StringExpr>(allocator)
            expr.kind = StmtKind.STRING_EXPR;
            expr.startPos = startPos
            //expr.string = null
            return expr as (*Stmt)
        }
        case StmtKind.SUBSCRIPT_GET_EXPR: {
            var expr = new<SubscriptGetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_GET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            return expr as (*Stmt);
        }
        case StmtKind.SUBSCRIPT_SET_EXPR: {
            var expr = new<SubscriptSetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            expr.value = null
            return expr as (*Stmt);
        }
        case StmtKind.TERNARY_EXPR: {
            var expr = new<TernaryExpr>(allocator)
            expr.kind = StmtKind.TERNARY_EXPR;
            expr.startPos = startPos
            expr.cond = null
            expr.then = null
            expr.other = null
            return expr as (*Stmt);
        }
        case StmtKind.TYPE_IDENTIFIER_EXPR: {
            var expr = new<TypeIdentifierExpr>(allocator)
            expr.kind = StmtKind.TYPE_IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym//
            return expr as (*Stmt);
        }
        case StmtKind.TYPE_OF_EXPR: {
            var expr = new<TypeOfExpr>(allocator)
            expr.kind = StmtKind.TYPE_OF_EXPR;
            expr.startPos = startPos
            expr.typeOfExpr = null
            expr.type = null
            return expr as (*Stmt);
        }
        case StmtKind.UNARY_EXPR: {
            var expr = new<UnaryExpr>(allocator)
            expr.kind = StmtKind.UNARY_EXPR;
            expr.startPos = startPos
            expr.unaryExpr = null
            return expr as (*Stmt);
        }
        default: {
            // TODO: Error
            Panic("Unknown statement kind: %d", kind)
        }
    }
    return null
}
*/