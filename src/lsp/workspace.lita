import "libc"
import "array"
import "map"
import "json"
import "string_buffer"
import "string"
import "mem"
import "system"
import "lita"
import "phase_result"
import "symbols"
import "checker"
import "module"
import "ast"
import "lex"
import "types"

import "lsp/lsp"
import "lsp/protocol"
import "lsp/references"
import "lsp/util"

public struct Workspace {
    allocator: *const Allocator
    lsp: *LspServer
    rootPath: *const char
    openedDocuments: Map<*const char, *TextDocument>
}

public struct TextDocument {
    filename: [MAX_PATH]char
    text: StringBuffer
}

public func (this: *Workspace) init(lsp: *LspServer, alloc: *const Allocator) {
    this.allocator = alloc
    this.lsp = lsp
    this.openedDocuments = StrMap<*TextDocument>(null, 64, this.allocator)
}

public func (this: *Workspace) setup(rootPath: *const char, rootUri: *const char) {
    this.rootPath = rootPath
    var lita = this.lsp.lita

    var filepath = [MAX_PATH]char{0};
    var pathStr = StringInit(filepath, MAX_PATH);

    pathStr.format("%s/src/main.lita", rootPath)
    this.lsp.log("Checking for main at: '%s'...", pathStr.cStr())

    if(FileExists(pathStr.cStrConst())) {
        this.lsp.log("found!\n")

        GetAbsolutePath("", pathStr.cStr(), lita.options.inputFile)
        FilePath(lita.options.inputFile, lita.options.srcPath)

        var lib:*const char = GetEnv("LITAC_HOME")
        if(!lib) lib = "";

        GetAbsolutePath("", lib, lita.options.litaPath)

        this.lsp.log("Lita.inputFile = '%s'\nLita.srcPath = '%s'\nLita.libPath = '%s'\nLita.litaPath = '%s'\n",
            lita.options.inputFile,
            lita.options.srcPath,
            lita.options.libPath,
            lita.options.litaPath)

        lita.options.checkerOnly = true
        return;
    }

    // TODO: Inspect the URI
    this.lsp.log("unable to find main.lita from '%s'\n", rootPath)
}

public func (this: *Workspace) isDocumentOpen(uri: *const char) : bool {
    if(!uri) return false;

    return this.openedDocuments.contains(uri)
}

public func (this: *Workspace) openDocument(uri: *const char, text: *const char) {
    if(!uri) return;

    var moduleUri = StringCopy(uri, -1, this.allocator)

    var doc = new<TextDocument>(this.allocator)
    doc.text = StringBufferInit(strlen(text), this.allocator)
    doc.text.append("%s", text)

    UriToFilePath(uri, doc.filename)

    this.openedDocuments.put(moduleUri, doc)
}

public func (this: *Workspace) saveDocument(uri: *const char) {
    if(!uri) return;
    // TODO: Implement...
}

public func (this: *Workspace) documentSymbols(uri: *const char, alloc: *const Allocator) : *JsonNode {
    if(!uri) return null;

    var doc = this.openedDocuments.get(uri)
    this.lsp.log("Uri: '%s' has doc: %d\n", uri, doc != null)
    if(!doc) return null;

    var syms = &this.lsp.lita.programSymbols
    var results = CreateJsonArray(alloc)

    // Generics
    for(var it = this.lsp.lita.genericSymbols.iter(); it.hasNext();) {
        var entry = it.next()
        var sym = entry.value

        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    // Values
    for(var i = 0; i < syms.values.size(); i += 1) {
        var sym = syms.values.get(i)
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    // Types
    for(var i = 0; i < syms.symbolTypes.size(); i += 1) {
        var sym = syms.symbolTypes.get(i)
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    // Show functions
    for(var i = 0; i < syms.symbolFuncs.size(); i += 1) {
        var sym = syms.symbolFuncs.get(i)
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    return results
}

func (this: *Workspace) addDocumentSymbol(results: *JsonNode, sym: *Symbol, docFilename: *const char, alloc: *const Allocator) {
    var absPath = [MAX_PATH]char{0}
    var path = GetAbsolutePath(this.rootPath, sym.declared.id.filename, absPath)
    if(PathEquals(path, docFilename)) {
        var info = SymbolToSymbolInformation(sym, this.rootPath, alloc)
        if(info) {
            results.add(info)
        }
    }
}

public func (this: *Workspace) references(uri: *const char, position: *JsonNode, alloc: *const Allocator) : *JsonNode {
    if(!uri) return null;

    var doc = this.openedDocuments.get(uri)
    var pos = Position {
        .line = position.getInt("line", 0),
        .character = position.getInt("character", 0)
    }

    var lookup = SourceLookup {
        .lsp = this.lsp,
        .lookupPos = pos,
        .result = SourceLocation {
            .kind = SourceLocationKind.NONE,
            .location = Location {
                .uri = uri,
            },
        }
    }

    var module = this.lsp.lita.modules.get(doc.filename)
    if(!module) {
        this.lsp.log("No module found for: '%s'\n", doc.filename)
        return JSON_NULL
    }

    this.lsp.log("Module for: '%s'\n", doc.filename)
    var location = lookup.findAstNodeByPosition(module.ast, pos)
    if(location.kind == SourceLocationKind.NONE) {
        this.lsp.log("No ast node found at '%s:%d:%d'\n", doc.filename, pos.line, pos.character)
        return JSON_NULL
    }

    if(location.kind == SourceLocationKind.AST) {
        this.lsp.log("Found ast node: %s\n", StmtKindAsStr(location.node.kind))

        switch(location.node.kind) {
            case StmtKind.NATIVE_DECL:
            case StmtKind.TYPEDEF_DECL:
            case StmtKind.UNION_DECL:
            case StmtKind.STRUCT_DECL:
            case StmtKind.ENUM_DECL:
            case StmtKind.FUNC_DECL: {
                var decl = location.node as (*Decl)

                // look for the type references
                if(decl.sym && decl.sym.type) {

                    var typeid = decl.sym.type.typeid
                    return this.findTypeReferences(typeid, alloc)
                }
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = location.node as (*VarFieldDecl)
                var parentNode = varField.parent
                while(parentNode && (parentNode.kind == StmtKind.UNION_DECL || parentNode.kind == StmtKind.STRUCT_DECL)) {
                    var decl = parentNode as (*AggregateDecl)
                    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
                        parentNode = decl.parent
                    }
                    else {
                        var parentType = decl.sym.type
                        if(parentType) {
                            var aggInfo = parentType as (*AggregateTypeInfo)
                            var fieldResult = aggInfo.getFieldPosition(varField.name.asString())
                            this.lsp.log("Getting field position: %d\n", fieldResult.position)
                            if(fieldResult.aggInfo) {
                                return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                            }
                        }
                        break
                    }
                }
                break
            }
            case StmtKind.PARAM_DECL: {
                // TODO: the name of the parameter (scope search)
                break
            }
            case StmtKind.INIT_ARG_EXPR: {
                var arg = location.node as (*InitArgExpr)
                var parentNode = arg.parent
                if(parentNode && (parentNode.kind == StmtKind.INIT_EXPR)) {
                    var init = parentNode as (*InitExpr)
                    var parentType = init.operand.typeInfo
                    if(IsAggregate(parentType)) {
                        var aggInfo = parentType as (*AggregateTypeInfo)
                        var fieldResult = aggInfo.getFieldPosition(arg.fieldName.asString())
                        this.lsp.log("Getting field position: %d\n", fieldResult.position)
                        if(fieldResult.aggInfo) {
                            return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                        }
                    }
                }
                break
            }
            case StmtKind.IDENTIFIER_EXPR: {
                break
            }
            case StmtKind.GET_EXPR: {
                var expr = location.node as (*GetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()
                if(IsAggregate(base)) {
                    var aggInfo = base as (*AggregateTypeInfo)
                    var fieldResult = aggInfo.getFieldPosition(expr.field.type.name)
                    this.lsp.log("Getting field position: %d\n", fieldResult.position)
                    if(fieldResult.aggInfo) {
                        return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                    }
                }
                else if (base.kind == TypeKind.ENUM) {
                    var enumInfo = base as (*EnumTypeInfo)
                    var index = enumInfo.getFieldIndex(expr.field.type.name)
                    this.lsp.log("Getting enum position: %d\n", index)
                    return this.findFieldReferences(enumInfo.typeid, index, alloc)
                }
                break
            }
            case StmtKind.SET_EXPR: {
                var expr = location.node as (*SetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()
                if(IsAggregate(base)) {
                    var aggInfo = base as (*AggregateTypeInfo)
                    var fieldResult = aggInfo.getFieldPosition(expr.field.type.name)
                    if(fieldResult.aggInfo) {
                        return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                    }
                }
                else if (base.kind == TypeKind.ENUM) {
                    var enumInfo = base as (*EnumTypeInfo)
                    var index = enumInfo.getFieldIndex(expr.field.type.name)
                    this.lsp.log("Getting enum position: %d\n", index)
                    return this.findFieldReferences(enumInfo.typeid, index, alloc)
                }
                break
            }
        }
    }
    else if(location.kind == SourceLocationKind.TYPE) {
        this.lsp.log("Found type: %s\n", TypeSpecKindAsStr(location.type.kind))
        if(!location.type.typeInfo) {
            return JSON_NULL
        }

        var typeid = location.type.typeInfo.typeid
        this.lsp.log("~typeid: %llu\n", typeid)
        return this.findTypeReferences(typeid, alloc)
    }

    return JSON_NULL
}


func (this: *Workspace) findTypeReferences(typeid: Typeid, alloc: *const Allocator) : *JsonNode {
    var results = ArrayInit<SrcPos>(64, alloc)
    this.lsp.lita.references.getTypeReferences(typeid, &results)

    return SrcPosToLocations(this.rootPath, &results, alloc)
}


func (this: *Workspace) findFieldReferences(typeid: Typeid, offset: i32, alloc: *const Allocator) : *JsonNode {
    var results = ArrayInit<SrcPos>(64, alloc)
    this.lsp.lita.references.getFieldReferences(typeid, offset, &results)

    return SrcPosToLocations(this.rootPath, &results, alloc)
}


public func (this: *Workspace) runDiagnostics(alloc: *const Allocator) : *PhaseResult {
    var startTime = SystemTimeMSec()
    var lita = this.lsp.lita
    lita.reset()

    var root = lita.parse()
    if(!root) {
        this.lsp.log("Failed to parse\n")
        goto report
    }

    var checked = lita.typeCheck(root)
    if(!checked) {
        this.lsp.log("Failed to type check\n")
        goto report
    }

    var totalTime = SystemTimeMSec()
    this.lsp.log("Successfully compiled in %.3f msec\n", totalTime)

report:
    return &lita.result
}