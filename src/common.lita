import "libc"

public enum LogLevel {
    TRACE,
    INFO,
    DEBUG,
    ERROR,
    FATAL
}

var outputFile: *FILE = null

public func Log(level: LogLevel, format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(level, format, args)
    va_end(args)
}

public func Logv(level: LogLevel, format: *const char, args: va_list) {
    if(!outputFile) {
        // Toggle for LSP debugging purposes - should we enable this via
        // command line?
        // outputFile = fopen("./litac.log", "w")

        if(!outputFile) {
            outputFile = stdout
        }
    }

    if(level > LogLevel.DEBUG) {
        vfprintf(stderr, format, args);
        fflush(stderr)
    }
    else {
        vfprintf(outputFile, format, args);
        fflush(outputFile)
    }

    if(level == LogLevel.FATAL) {
        exit(2);
    }
}

public func Info(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.INFO, format, args)
    va_end(args)
}

public func Debug(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.DEBUG, format, args)
    va_end(args)
}

public func Error(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.ERROR, format, args)
    va_end(args)
}

public func Panic(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.FATAL, format, args)
    va_end(args)
}