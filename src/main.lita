import "libc"
import "mem"
import "io"
import "lex"
import "lita"
import "types"
import "ast"
import "ast_new"
import "ast_print"
import "parser"
import "phase_result"
import "system"
import "array"
import "map"
import "error_codes"
import "module"
import "string"
import "string_view"
import "string_buffer"
import "checker"
import "cgen"
import "lsp/lsp"
import "cmdline"
import "profile"

func main(len: i32, args: **char) : i32 {
    var startTime = SystemTimeMSec()

    var options = LitaOptions{}
    if(!ParseArgs(len, args, &options)) {
        return -1;
    }

    var lita = Lita{}
    lita.init(&options)
    defer lita.free()

    if(options.languageServer) {
        var server = LspServer{}
        server.init(&lita)
        defer server.free()

        server.start()

        return 0;
    }

    var root = lita.parse()
    if(!root) {
        goto report
    }

    if(!lita.typeCheck(root)) {
        goto report
    }

    if(options.checkerOnly) {
        goto report;
    }

    if(!lita.transpile(root)) {
        goto report;
    }

    var runProgram = options.run

report:
    var totalTime = SystemTimeMSec() - startTime

    var sb = StringBufferInit(1024)
    defer sb.free()

    if(!lita.result.errors.empty()) {
        for(var i = 0; i < lita.result.errors.size(); i += 1) {
            PrintError(sb, lita.result.errors.get(i))

            printf("%s\n", sb.cStr())
            sb.clear()
        }
        printf("Total errors: %d\n", lita.result.errors.size())
    }

    if(options.showProfileInfo) {
        var allocator: *LinearAllocator = lita.allocator as (*LinearAllocator)

        printf("\n\n")
        printf("%-30s %-17s %-6s %-14s %-5s\n", "Segment", "Time", "%", "Mem", "#")
        printf("====================================================================================\n")
        for(var i = 0; i < MetricType.MAX_METRIC_TYPES; i+=1) {
            var metric = &lita.metrics[i]
            printf("%-30s %-15.6f   %3.0f%% %-14zu %-5u\n",
                MetricTypeAsStr(i),
                metric.executionTime,
                (metric.executionTime / totalTime) * 100f,
                metric.bytesAllocated,
                metric.allocationCount)
        }
        printf("\n")
        printf("Total time:         %f\n", totalTime)
        printf("Total memory:       %llu\n", allocator.totalBytesAllocated)
        printf("Total allocations:  %u\n", allocator.totalAllocations)
        printf("Total source lines: %u\n", lita.totalSourceLines)
        printf("\n")
    }


    if(runProgram) {
        lita.run()
    }

    return 0
}

func ParseArgs(n: i32, args: **char, options: *LitaOptions) : bool {
    var parser = CmdParserInit()
    defer parser.free()

    parser.header = "<usage> litac [options] [source file to compile]\nOPTIONS:";
    parser.addOption("languageServer", '\0', "Start the LitaC language server", 0, null);
    parser.addOption("lib", '\0', "The LitaC library path", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("cPrefx", '\0', "The symbol prefix to use on the generated C code output", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("cFormat", '\0', "Formats the C output", 0, null);
    parser.addOption("run", '\0', "Runs the program after a successful compile", 0, null);
    parser.addOption("checkerOnly", '\0', "Only runs the type checker, does not compile", 0, null);
    parser.addOption("cOnly", '\0', "Only creates the C output file, does not cimple the generated C code", 0, null);
    parser.addOption("profile", '\0', "Reports profile metrics of the compiler", 0, null);
    parser.addOption("disableLine", '\0', "Disables #line dorective in C output", 0, null);
    parser.addOption("debug", '\0', "Enables debug mode", 0, null);
    parser.addOption("verbose", '\0', "Enables verbose output", 0, null);
    parser.addOption("instrument", '\0', "Enables profile instrumentation of @profile annotated functions", 0, null);
    parser.addOption("srcDir", '\0', "Specifies the source code directory, defaults to the parent folder of the supplied source file", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("doc", '\0', "Generates document output", 0, null);
    parser.addOption("docDir", '\0', "Directory where the generated documents are written to, defaults to './output'", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("docAll", '\0', "Includes non-public types in the documentation generation", 0, null);
    parser.addOption("output", 'o', "The name of the compiled binary", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("outputDir", '\0', "The directory in which the C ouput files are stored", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("version", 'v', "Displays the LitaC version", 0, null);
    parser.addOption("help", 'h', "Displays this help", 0, null);
    parser.addOption("types", 't', "Includes TypeInfo for reflection\n<arg> can be:\nall       Means all types will have reflection values\ntagged    Means only basic types and types annotated with @typeinfo will have reflection values", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("test", '\0', "Runs functions annotated with @test\n<arg> is a regex of which tests should be run", OptionFlag.HAS_ARGUMENT, null);
    parser.addOption("testFile", '\0', "Runs functions annotated with @test in the suppplied source file only", 0, null);
    parser.addOption("buildCmd", 'b', "The underlying C compiler build and compile command.  Variables will be substituted if found:\n%output%\tThe executable name\n%input%\tThe file(s) generated", OptionFlag.HAS_ARGUMENT, null);

    if(parser.parse(n, args) != CmdParserStatus.OK) {
        goto err_print;
    }

    options.languageServer = parser.hasOption("languageServer")

    if(!options.languageServer) {
        if(parser.args.size() < 2) {
            printf("Missing input file\n")
            goto err;
        }

        GetAbsolutePath(CurrentWorkingPath(), parser.args.get(1), options.inputFile)
    }

    var lib:*const char = GetEnv("LITAC_HOME")
    if(!lib) lib = "";

    GetAbsolutePath("", lib, options.litaPath)

    if(parser.hasOption("help")) {
        var sb = StringBufferInit()
        defer sb.free()

        parser.printHelp(sb)
        printf("%s", sb.cStr())
    }

    options.checkerOnly = parser.hasOption("checkerOnly")
    options.cOutputOnly = parser.hasOption("cOnly")
    options.showProfileInfo = parser.hasOption("profile")
    options.run = parser.hasOption("run")
    options.isDebug = parser.hasOption("debug")
    options.cFormat = parser.hasOption("cFormat")
    options.instrument = parser.hasOption("instrument")

    options.typeOption = TypeInfoOption.NONE
    if(parser.hasOption("types")) {
        var opt = parser.getOption("types").value
        if(strcmp(opt, "all") == 0) {
            options.typeOption = TypeInfoOption.ALL
        }
        else if(strcmp(opt, "tagged") == 0) {
            options.typeOption = TypeInfoOption.TAGGED
        }
    }

    if(parser.hasOption("test")) {
        options.testsRegex = parser.getOption("test").value
        options.testsOnly = true
    }

    if(parser.hasOption("testFile")) {
        options.testFileOnly = true
        options.testsOnly = true
    }

    if(parser.hasOption("buildCmd")) {
        options.compileCmd = parser.getOption("buildCmd").value
    }
    else {
        options.compileCmd = "clang %input% -std=c99 -o %output% -D_CRT_SECURE_NO_WARNINGS"
    }

    var cPrefix = parser.hasOption("cPrefix") ? parser.getOption("cPrefix").value : "litaC_"
    strncpy(options.cPrefix, cPrefix, MAX_PREFIX_SIZE)

    var outputFile = parser.hasOption("output") ? parser.getOption("output").value : "a"
    strncpy(options.outputFile, outputFile, MAX_PATH)

    var outputPath = parser.hasOption("outputDir") ? parser.getOption("outputDir").value : "./output"
    strncpy(options.outputPath, outputPath, MAX_PATH)

    var len = strlen(options.outputPath)
    if(len > 0) {
        if(options.outputPath[len-1] != '/') {
            strcat(options.outputPath, "/")
        }

        var output = [MAX_PATH]char{0}
        GetAbsolutePath(CurrentWorkingPath(), options.outputPath, output)
        strncpy(options.outputPath, output, MAX_PATH)
    }

    FilePath(options.inputFile, options.srcPath)
    return true

err_print:
    {
        var sb = StringBufferInit()
        defer sb.free()

        parser.printHelp(sb)
        printf("%s", sb.cStr())
    }
err:
    return false
}
