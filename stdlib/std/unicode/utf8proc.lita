
@raw("#define UTF8PROC_STATIC");
@cFile("utf8proc.h");
@cFile("utf8proc_data.c");
@cFile("utf8proc.c");

@foreign public typedef i8 as utf8proc_int8_t;
@foreign public typedef u8 as utf8proc_uint8_t;
@foreign public typedef i16 as utf8proc_int16_t;
@foreign public typedef u16 as utf8proc_uint16_t;
@foreign public typedef i32 as utf8proc_int32_t;
@foreign public typedef u32 as utf8proc_uint32_t;
@foreign public typedef usize as utf8proc_size_t;
@foreign public typedef i64 as utf8proc_ssize_t;
@foreign public typedef bool as utf8proc_bool;

@foreign
public enum utf8proc_option_t {
   UTF8PROC_NULLTERM
  ,UTF8PROC_STABLE
  ,UTF8PROC_COMPAT
  ,UTF8PROC_COMPOSE
  ,UTF8PROC_DECOMPOSE
  ,UTF8PROC_IGNORE
  ,UTF8PROC_REJECTNA
  ,UTF8PROC_NLF2LS
  ,UTF8PROC_NLF2PS
  ,UTF8PROC_NLF2LF
  ,UTF8PROC_STRIPCC
  ,UTF8PROC_CASEFOLD
  ,UTF8PROC_CHARBOUND
  ,UTF8PROC_LUMP
  ,UTF8PROC_STRIPMARK
  ,UTF8PROC_STRIPNA
}

@foreign public typedef void as utf8proc_propval_t;

@foreign
public struct utf8proc_property_struct {
   category: utf8proc_propval_t
   combining_class: utf8proc_propval_t
   bidi_class: utf8proc_propval_t
   decomp_type: utf8proc_propval_t
   decomp_seqindex: utf8proc_uint16_t
   casefold_seqindex: utf8proc_uint16_t
   uppercase_seqindex: utf8proc_uint16_t
   lowercase_seqindex: utf8proc_uint16_t
   titlecase_seqindex: utf8proc_uint16_t
   comb_index: utf8proc_uint16_t
   bidi_mirrored: u32
   comp_exclusion: u32
   ignorable: u32
   control_boundary: u32
   charwidth: u32
   pad: u32
   boundclass: u32
}
@foreign public typedef void as utf8proc_property_t;

@foreign
public enum utf8proc_category_t {
   UTF8PROC_CATEGORY_CN
  ,UTF8PROC_CATEGORY_LU
  ,UTF8PROC_CATEGORY_LL
  ,UTF8PROC_CATEGORY_LT
  ,UTF8PROC_CATEGORY_LM
  ,UTF8PROC_CATEGORY_LO
  ,UTF8PROC_CATEGORY_MN
  ,UTF8PROC_CATEGORY_MC
  ,UTF8PROC_CATEGORY_ME
  ,UTF8PROC_CATEGORY_ND
  ,UTF8PROC_CATEGORY_NL
  ,UTF8PROC_CATEGORY_NO
  ,UTF8PROC_CATEGORY_PC
  ,UTF8PROC_CATEGORY_PD
  ,UTF8PROC_CATEGORY_PS
  ,UTF8PROC_CATEGORY_PE
  ,UTF8PROC_CATEGORY_PI
  ,UTF8PROC_CATEGORY_PF
  ,UTF8PROC_CATEGORY_PO
  ,UTF8PROC_CATEGORY_SM
  ,UTF8PROC_CATEGORY_SC
  ,UTF8PROC_CATEGORY_SK
  ,UTF8PROC_CATEGORY_SO
  ,UTF8PROC_CATEGORY_ZS
  ,UTF8PROC_CATEGORY_ZL
  ,UTF8PROC_CATEGORY_ZP
  ,UTF8PROC_CATEGORY_CC
  ,UTF8PROC_CATEGORY_CF
  ,UTF8PROC_CATEGORY_CS
  ,UTF8PROC_CATEGORY_CO
}

@foreign
public enum utf8proc_bidi_class_t {
   UTF8PROC_BIDI_CLASS_L
  ,UTF8PROC_BIDI_CLASS_LRE
  ,UTF8PROC_BIDI_CLASS_LRO
  ,UTF8PROC_BIDI_CLASS_R
  ,UTF8PROC_BIDI_CLASS_AL
  ,UTF8PROC_BIDI_CLASS_RLE
  ,UTF8PROC_BIDI_CLASS_RLO
  ,UTF8PROC_BIDI_CLASS_PDF
  ,UTF8PROC_BIDI_CLASS_EN
  ,UTF8PROC_BIDI_CLASS_ES
  ,UTF8PROC_BIDI_CLASS_ET
  ,UTF8PROC_BIDI_CLASS_AN
  ,UTF8PROC_BIDI_CLASS_CS
  ,UTF8PROC_BIDI_CLASS_NSM
  ,UTF8PROC_BIDI_CLASS_BN
  ,UTF8PROC_BIDI_CLASS_B
  ,UTF8PROC_BIDI_CLASS_S
  ,UTF8PROC_BIDI_CLASS_WS
  ,UTF8PROC_BIDI_CLASS_ON
  ,UTF8PROC_BIDI_CLASS_LRI
  ,UTF8PROC_BIDI_CLASS_RLI
  ,UTF8PROC_BIDI_CLASS_FSI
  ,UTF8PROC_BIDI_CLASS_PDI
}


@foreign
public enum utf8proc_decomp_type_t {
   UTF8PROC_DECOMP_TYPE_FONT
  ,UTF8PROC_DECOMP_TYPE_NOBREAK
  ,UTF8PROC_DECOMP_TYPE_INITIAL
  ,UTF8PROC_DECOMP_TYPE_MEDIAL
  ,UTF8PROC_DECOMP_TYPE_FINAL
  ,UTF8PROC_DECOMP_TYPE_ISOLATED
  ,UTF8PROC_DECOMP_TYPE_CIRCLE
  ,UTF8PROC_DECOMP_TYPE_SUPER
  ,UTF8PROC_DECOMP_TYPE_SUB
  ,UTF8PROC_DECOMP_TYPE_VERTICAL
  ,UTF8PROC_DECOMP_TYPE_WIDE
  ,UTF8PROC_DECOMP_TYPE_NARROW
  ,UTF8PROC_DECOMP_TYPE_SMALL
  ,UTF8PROC_DECOMP_TYPE_SQUARE
  ,UTF8PROC_DECOMP_TYPE_FRACTION
  ,UTF8PROC_DECOMP_TYPE_COMPAT
}


@foreign
public enum utf8proc_boundclass_t {
   UTF8PROC_BOUNDCLASS_START
  ,UTF8PROC_BOUNDCLASS_OTHER
  ,UTF8PROC_BOUNDCLASS_CR
  ,UTF8PROC_BOUNDCLASS_LF
  ,UTF8PROC_BOUNDCLASS_CONTROL
  ,UTF8PROC_BOUNDCLASS_EXTEND
  ,UTF8PROC_BOUNDCLASS_L
  ,UTF8PROC_BOUNDCLASS_V
  ,UTF8PROC_BOUNDCLASS_T
  ,UTF8PROC_BOUNDCLASS_LV
  ,UTF8PROC_BOUNDCLASS_LVT
  ,UTF8PROC_BOUNDCLASS_REGIONAL_INDICATOR
  ,UTF8PROC_BOUNDCLASS_SPACINGMARK
  ,UTF8PROC_BOUNDCLASS_PREPEND
  ,UTF8PROC_BOUNDCLASS_ZWJ
  ,UTF8PROC_BOUNDCLASS_E_BASE
  ,UTF8PROC_BOUNDCLASS_E_MODIFIER
  ,UTF8PROC_BOUNDCLASS_GLUE_AFTER_ZWJ
  ,UTF8PROC_BOUNDCLASS_E_BASE_GAZ
  ,UTF8PROC_BOUNDCLASS_EXTENDED_PICTOGRAPHIC
  ,UTF8PROC_BOUNDCLASS_E_ZWG
}

@foreign public typedef func(utf8proc_int32_t, *void) : utf8proc_int32_t as utf8proc_custom_func;
@foreign public var utf8proc_utf8class: [256] const utf8proc_int8_t;

@foreign
public func utf8proc_version() : *const char;

@foreign
public func utf8proc_unicode_version() : *const char;

@foreign
public func utf8proc_errmsg(p0: utf8proc_ssize_t) : *const char;

@foreign
public func utf8proc_iterate(p0: *const utf8proc_uint8_t, p1: utf8proc_ssize_t, p2: *utf8proc_int32_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_codepoint_valid(p0: utf8proc_int32_t) : utf8proc_bool;

@foreign
public func utf8proc_encode_char(p0: utf8proc_int32_t, p1: *utf8proc_uint8_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_get_property(p0: utf8proc_int32_t) : *const utf8proc_property_t;

@foreign
public func utf8proc_decompose_char(p0: utf8proc_int32_t, p1: *utf8proc_int32_t, p2: utf8proc_ssize_t, p3: utf8proc_option_t, p4: *i32) : utf8proc_ssize_t;

@foreign
public func utf8proc_decompose(p0: *const utf8proc_uint8_t, p1: utf8proc_ssize_t, p2: *utf8proc_int32_t, p3: utf8proc_ssize_t, p4: utf8proc_option_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_decompose_custom(p0: *const utf8proc_uint8_t, p1: utf8proc_ssize_t, p2: *utf8proc_int32_t, p3: utf8proc_ssize_t, p4: utf8proc_option_t, p5: utf8proc_custom_func, p6: *void) : utf8proc_ssize_t;

@foreign
public func utf8proc_normalize_utf32(p0: *utf8proc_int32_t, p1: utf8proc_ssize_t, p2: utf8proc_option_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_reencode(p0: *utf8proc_int32_t, p1: utf8proc_ssize_t, p2: utf8proc_option_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_grapheme_break_stateful(p0: utf8proc_int32_t, p1: utf8proc_int32_t, p2: *utf8proc_int32_t) : utf8proc_bool;

@foreign
public func utf8proc_grapheme_break(p0: utf8proc_int32_t, p1: utf8proc_int32_t) : utf8proc_bool;

@foreign
public func utf8proc_tolower(p0: utf8proc_int32_t) : utf8proc_int32_t;

@foreign
public func utf8proc_toupper(p0: utf8proc_int32_t) : utf8proc_int32_t;

@foreign
public func utf8proc_totitle(p0: utf8proc_int32_t) : utf8proc_int32_t;

@foreign
public func utf8proc_islower(p0: utf8proc_int32_t) : i32;

@foreign
public func utf8proc_isupper(p0: utf8proc_int32_t) : i32;

@foreign
public func utf8proc_charwidth(p0: utf8proc_int32_t) : i32;

@foreign
public func utf8proc_category(p0: utf8proc_int32_t) : utf8proc_category_t;

@foreign
public func utf8proc_category_string(p0: utf8proc_int32_t) : *const char;

@foreign
public func utf8proc_map(p0: *const utf8proc_uint8_t, p1: utf8proc_ssize_t, p2: **utf8proc_uint8_t, p3: utf8proc_option_t) : utf8proc_ssize_t;

@foreign
public func utf8proc_map_custom(p0: *const utf8proc_uint8_t, p1: utf8proc_ssize_t, p2: **utf8proc_uint8_t, p3: utf8proc_option_t, p4: utf8proc_custom_func, p5: *void) : utf8proc_ssize_t;

@foreign
public func utf8proc_NFD(p0: *const utf8proc_uint8_t) : *utf8proc_uint8_t;

@foreign
public func utf8proc_NFC(p0: *const utf8proc_uint8_t) : *utf8proc_uint8_t;

@foreign
public func utf8proc_NFKD(p0: *const utf8proc_uint8_t) : *utf8proc_uint8_t;

@foreign
public func utf8proc_NFKC(p0: *const utf8proc_uint8_t) : *utf8proc_uint8_t;

@foreign
public func utf8proc_NFKC_Casefold(p0: *const utf8proc_uint8_t) : *utf8proc_uint8_t;
// empty macro!!
@foreign public const UTF8PROC_VERSION_MAJOR: i32;
@foreign public const UTF8PROC_VERSION_MINOR: i32;
@foreign public const UTF8PROC_VERSION_PATCH: i32;
@foreign public const UTF8PROC_DLLEXPORT: i32;
@foreign public const UTF8PROC_ERROR_NOMEM: i32;
@foreign public const UTF8PROC_ERROR_OVERFLOW: i32;
@foreign public const UTF8PROC_ERROR_INVALIDUTF8: i32;
@foreign public const UTF8PROC_ERROR_NOTASSIGNED: i32;
@foreign public const UTF8PROC_ERROR_INVALIDOPTS: i32;
