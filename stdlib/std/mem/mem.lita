import "std/libc" as c;
import "std/array";
import "std/assert"

@raw("""
#define LITAC_DEFAULT_ALIGNMENT (2*sizeof(void*))
""");


@foreign
public const LITAC_DEFAULT_ALIGNMENT: usize;

public const KiB:usize = 1024;
public const MiB:usize = 1024 * KiB;
public const GiB:usize = 1024 * MiB;

/**
=========================================================
// new allocates a type T
=========================================================
*/

#if (DEBUG)

    public func new<T>(a: *const Allocator = defaultAllocator,
                      file: *const char = c::__FILE__,
                      line: u64 = c::__LINE__) : *T {

        var result = a.calloc(1, sizeof(:T), file, line) as (*T)
        return result
    }

#else

    public func new<T>(a: *const Allocator = defaultAllocator) : *T {
        var result = a.calloc(1, sizeof(:T)) as (*T)
        return result
    }

#end

/**
=========================================================
// Duplicates the supplied memory
=========================================================
*/
public func memduplicate(p: *const void,
                         len: usize,
                         a: *const Allocator = defaultAllocator) : *void {
    var copy = a.alloc(len)
    c::memcpy(copy, p, len)

    return copy
}

///
// From GingerBill!!
// Reference: http://www.gingerbill.org/article/2019/02/08/memory-allocation-strategies-002/
///
public func isPowerOfTwo(x: usize) : bool {
    return (x & (x-1)) == 0
}

public func alignForward(ptr: usize, align: usize) : usize {
    assert(isPowerOfTwo(align))

    var p:usize = ptr;
    var a:usize = align;
    var modulo:usize = p & (a - 1);

    if(modulo != 0) {
        p += (a - modulo)
    }

    return p
}

/**
=========================================================
// Allocator interface
=========================================================
*/

#if (DEBUG)
    public struct Allocator {
        allocFn:   func(*const Allocator, usize, *const char, u64): *void
        callocFn:  func(*const Allocator, usize, usize, *const char, u64): *void
        reallocFn: func(*const Allocator, *void, usize, usize, *const char, u64) : *void
        freeFn:    func(*const Allocator, *void) : void
    }

    @inline
    public func (a: *const Allocator) alloc(size: usize,
                                            file: *const char = c::__FILE__,
                                            line: u64 = c::__LINE__) : *void {
        return a.allocFn(a, size, file, line)
    }

    @inline
    public func (a: *const Allocator) calloc(num: usize,
                                             size: usize,
                                             file: *const char = c::__FILE__,
                                             line: u64 = c::__LINE__) : *void {
        return a.callocFn(a, num, size, file, line)
    }

    @inline
    public func (a: *const Allocator) realloc(ptr: *void,
                                              oldsize: usize,
                                              newsize: usize,
                                              file: *const char = c::__FILE__,
                                              line: u64 = c::__LINE__) : *void {
        return a.reallocFn(a, ptr, oldsize, newsize, file, line)
    }

    @inline
    public func (a: *const Allocator) free(ptr: *void) {
        return a.freeFn(a, ptr)
    }

#else

    public struct Allocator {
        allocFn:   func(*const Allocator, usize): *void
        callocFn:  func(*const Allocator, usize, usize): *void
        reallocFn: func(*const Allocator, *void, usize, usize) : *void
        freeFn:    func(*const Allocator, *void) : void
    }

    @inline
    public func (a: *const Allocator) alloc(size: usize) : *void {
        return a.allocFn(a, size)
    }

    @inline
    public func (a: *const Allocator) calloc(num: usize, size: usize) : *void {
        return a.callocFn(a, num, size)
    }

    @inline
    public func (a: *const Allocator) realloc(ptr: *void, oldsize: usize, newsize: usize) : *void {
        return a.reallocFn(a, ptr, oldsize, newsize)
    }

    @inline
    public func (a: *const Allocator) free(ptr: *void) {
        a.freeFn(a, ptr)
    }

#end


/**
=========================================================
// C Library allocator
=========================================================
*/
public const cAllocator : *const Allocator = (&Allocator {
    .allocFn:   &cMalloc,
    .callocFn:  &cCalloc,
    .reallocFn: &cRealloc,
    .freeFn:    &cFree
}) as (*const Allocator);

#if (DEBUG)

    func cMalloc(a: *const Allocator,
                 size: usize,
                 file: *const char = c::__FILE__,
                 line: u64 = c::__LINE__) : *void {
        return c::malloc(size);
    }

    func cCalloc(a: *const Allocator,
                 num: usize,
                 size: usize,
                 file: *const char = c::__FILE__,
                 line: u64 = c::__LINE__) : *void {
        return c::calloc(num, size);
    }

    func cRealloc(a: *const Allocator,
                  ptr: *void,
                  oldSize: usize,
                  size: usize,
                  file: *const char = c::__FILE__,
                  line: u64 = c::__LINE__) : *void {
        return c::realloc(ptr, size);
    }

    func cFree(a: *const Allocator, ptr: *void) {
        return c::free(ptr)
    }


#else

    func cMalloc(a: *const Allocator, size: usize) : *void {
        return c::malloc(size);
    }

    func cCalloc(a: *const Allocator, num: usize, size: usize) : *void {
        return c::calloc(num, size);
    }

    func cRealloc(a: *const Allocator, ptr: *void, oldSize: usize, size: usize) : *void {
        return c::realloc(ptr, size);
    }

    func cFree(a: *const Allocator, ptr: *void) {
        return c::free(ptr)
    }

#end


#if (DEBUG)
    public func GenericMalloc<T>(alloc: *const Allocator,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size);
        return result
    }

    public func GenericCalloc<T>(alloc: *const Allocator,
                        num: usize,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    public func GenericRealloc<T>(alloc: *const Allocator,
                        ptr: *void,
                        oldSize: usize,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        if(ptr == null) {
            return GenericMalloc<T>(alloc, size)
        }

        var this = alloc as (*T);

        var result = this.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)
        }

        return result
    }

#else
    public func GenericMalloc<T>(alloc: *const Allocator,
                        size: usize) : *void {
        var this = alloc as (*T);
        return this.malloc(size);
    }

    public func GenericCalloc<T>(alloc: *const Allocator,
                        num: usize,
                        size: usize) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    public func GenericRealloc<T>(alloc: *const Allocator,
                        ptr: *void,
                        oldSize: usize,
                        size: usize) : *void {
        if(ptr == null) {
            return GenericMalloc<T>(alloc, size)
        }

        var this = alloc as (*T);

        var result = this.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)
        }

        return result
    }
#end

/**
=========================================================
// Debug Leak Detection allocator
=========================================================
*/
const MAX_PATH = 256

#if (DEBUG)
public struct Allocation {
    addr: *void
    size: usize
    line: u64
    filename: [MAX_PATH]char
}
#else
public struct Allocation {
    addr: *void
    size: usize
}
#end

public struct DebugAllocator {
    alloc: Allocator
    decorated: *const Allocator
    allocations: Array<*Allocation>
    totalAllocations: u32
    totalBytesAllocated: usize
    totalBytesFreed: usize
}

public const debugAllocator = (&DebugAllocator {
})

public func (d: *DebugAllocator) init(alloc: *const Allocator = defaultAllocator) {
    d.alloc = Allocator {
        .allocFn:   &DebugMalloc,
        .callocFn:  &DebugCalloc,
        .reallocFn: &DebugRealloc,
        .freeFn:    &DebugFree
    }
    d.decorated = alloc
    d.allocations.init(128, alloc)
    d.totalBytesAllocated = 0
    d.totalAllocations = 0
}

public func (d: *DebugAllocator) free() {
    d.allocations.free()
}

#if (DEBUG)
    public func (d: *DebugAllocator) report() {
        c::printf("Leaked Allocations: {\n")
        for(var i = 0; i < d.allocations.size(); i += 1) {
            var a = d.allocations.get(i)
            if(a.line > 0) {
                c::printf("   Leak at %p (%zu bytes) allocated in '%s' at line: %ju\n", a.addr, a.size, a.filename, a.line)
            }
            else {
                c::printf("   Leak at %p (%zu bytes)\n", a.addr, a.size)
            }
        }
        c::printf("}\n")
    }

    public func (d: *DebugAllocator) malloc(size: usize,
                                            file: *const char,
                                            line: u64) : *void {

        var allocationSize = sizeof(:Allocation) + size;
        var mem = d.decorated.alloc(allocationSize, file, line);
        if(!mem) {
            return null;
        }

        var allocation = mem as (*Allocation)
        allocation.addr = mem + sizeof(:Allocation)
        allocation.size = size
        allocation.line = line
        c::strncpy(allocation.filename, file, MAX_PATH)

        d.allocations.add(allocation)
        d.totalBytesAllocated += size
        d.totalAllocations += 1

        /*var mem = d.decorated.alloc(size)
        if(mem) {
            var allocation = new<Allocation>(d.decorated);
            allocation.addr = mem
            allocation.size = size
            allocation.line = line
            c::strncpy(allocation.filename, file, MAX_PATH)

            d.allocations.add(allocation)
            d.totalBytesAllocated += size
            d.totalAllocations += 1
        }*/

        return allocation.addr;
    }


    func DebugMalloc(alloc: *const Allocator,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var debug = alloc as (*DebugAllocator);
        return debug.malloc(size, file, line);
    }

    func DebugCalloc(alloc: *const Allocator,
                     num: usize,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var debug = alloc as (*DebugAllocator);
        var result = debug.malloc(size * num, file, line);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func DebugRealloc(alloc: *const Allocator,
                      ptr: *void,
                      oldSize: usize,
                      size: usize,
                      file: *const char = c::__FILE__,
                      line: u64 = c::__LINE__) : *void {
        if(ptr == null) {
            return DebugMalloc(alloc, size, file, line)
        }

        var debug = alloc as (*DebugAllocator);

        var result = debug.malloc(size, file, line);
        if(result) {
            var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)
            var len = c::MIN(allocation.size, size)

            c::memcpy(result, ptr, len)

            DebugFree(alloc, ptr)
        }

        return result
    }

#else
    public func (d: *DebugAllocator) report() {
        c::printf("Leaked Allocations: {\n")
        for(var i = 0; i < d.allocations.size(); i += 1) {
            var a = d.allocations.get(i)
            c::printf("   Leak at %p (%zu bytes)\n", a.addr, a.size)
        }
        c::printf("}\n")
    }

    public func (d: *DebugAllocator) malloc(size: usize) : *void {
        var allocationSize = sizeof(:Allocation) + size;
        var mem = d.decorated.alloc(allocationSize);
        if(!mem) {
            return null;
        }

        var allocation = mem as (*Allocation)
        allocation.addr = mem + sizeof(:Allocation)
        allocation.size = size

        d.allocations.add(allocation)
        d.totalBytesAllocated += size
        d.totalAllocations += 1

        return allocation.addr;
    }

    func DebugMalloc(alloc: *const Allocator, size: usize) : *void {
        var debug = alloc as (*DebugAllocator);
        return debug.malloc(size);
    }

    func DebugCalloc(alloc: *const Allocator, num: usize, size: usize) : *void {
        var debug = alloc as (*DebugAllocator);
        var result = debug.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func DebugRealloc(alloc: *const Allocator, ptr: *void, oldSize: usize, size: usize) : *void {
        if(ptr == null) {
            return DebugMalloc(alloc, size)
        }

        var debug = alloc as (*DebugAllocator);

        var result = debug.malloc(size);
        if(result) {
            var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)
            var len = c::MIN(allocation.size, size)

            c::memcpy(result, ptr, len)

            DebugFree(alloc, ptr)
        }

        return result
    }

#end

func DebugFree(alloc: *const Allocator, ptr: *void) {
    if(ptr == null) {
        return;
    }

    var debug = alloc as (*DebugAllocator);
    var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)

    var addr = ptr;

    var found = false
    for(var i = 0; i < debug.allocations.size();) {
        var allocation = debug.allocations.get(i)
        if(allocation.addr == addr) {
            debug.totalBytesFreed += allocation.size
            debug.allocations.removeAt(i)
            debug.decorated.free(allocation)
            found = true
            break
        }
        else {
            i += 1
        }
    }

    if(!found) {
        c::printf("Allocation not found: %p\n", ptr)
        debug.decorated.free(ptr)
    }

}


/**
=========================================================
// Default allocator
=========================================================
*/

#if (DEBUG)

   // @threadlocal
    // TODO: This isn't thread safe :(
    public var defaultAllocator: *const Allocator = (&DebugAllocator {
    }) as (*const Allocator);

    @module_init
    public func ModuleInit() {
        var debugAllocator = defaultAllocator as (*DebugAllocator)
        debugAllocator.init(cAllocator);
    }

    @module_destroy
    public func ModuleDestroy() {
        var debugAllocator = defaultAllocator as (*DebugAllocator)
        debugAllocator.report();
        debugAllocator.free();
    }

#else

    @threadlocal
    public var defaultAllocator: *const Allocator = (&Allocator {
            .allocFn:   &cMalloc,
            .callocFn:  &cCalloc,
            .reallocFn: &cRealloc,
            .freeFn:    &cFree
        }) as (*const Allocator);

#end

@test
func testLineNumber() {
    var mem = defaultAllocator.alloc(1024)
}