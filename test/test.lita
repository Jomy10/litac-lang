/*var : void* = "hi"
var t = 1
const x i32 = 42

func test2<  (x: bool, ...) : i32 {
    return 4
}*/

//const z:i32;
//var x:bool = "hi"
//var y = null
/*
const c = 2;
var x = 4;
var y = "hi"
var z = [2]i32 {1, 2}
var w = &x
*/
/*
@foreign
enum EnumTest {
  //  TEST_FIELD = c
}

struct StructTest {
    name: *const char = "sparks"
    age: i32

    struct EmbeddedStruct {
        name: *const char
        struct {
            age: f32
        }
       // age: i64
    }
}

func Test1(i: i32) {

}

func Test2(i: i32, j: i32) {

}

func TestV(i: i32, ...) {

}
*/


enum TypeKind {
    Array = 1,
    Const = 2 + 3,
    Ptr
}

struct TEMP {
    x:i32
}
@include("<stdio.h>");
@foreign public func printf(s:*const char, ...) : void;

func main(len: i32, args: **char) : i32 {
    
    /*FuncTest(len, args)
    var i:i32 = 10.001_f32 as (i32)
    printf("%s\n", "hello world!")

    var x = sizeof(:i32)
    var y = sizeof(i)

    printf("Raw: '%s'\n", text)

    var wq = offsetof(TEMP, x)
    var z = text[0]
    var w = [2]i32 {0,0}
    w[0] = 2

    var zz = TypeKind.Array
    var tt = TEMP{}
    tt.x = 4
    var xx = tt.x
*/
    var z = 0
    if(true) {
        z += 1
    }
    else z -= 1

    for(var i = 0; i < 10; i += 1) {
        defer printf("%d\n", i)
        if(i % 2) {
            continue
        }
        else if(i == 7) {
            break
        }
    }

    switch(1) {
        case 2:
        case 4:
        case 5: break;
        case 6: {
            var i = 1
            break;
        }
        default: {
            var x = 1 + 0
        }
    }
}

var text = """
 Because I can!
 \\ \n\r\ 
"""

struct Person {
    //name: *const char
    email: Email

    /*
    struct Address {
        line: *const char
        zip: i32
    }

    union Value {
        t: [2]i32
        m: [2]*const char
    }*/
}


struct Email {
    email: *const char
    //person: Person
    address: Address
}

struct Address {
    street: *const char
    zip: i32
    city: *const char
}

func AnotherFunc(n:i32, args: **char, a: *Address) : i32 {
    return 4
}

func AnotherFunc1(n:i32, args: **char) : i32 {
    return 4
}

func FuncTest(len: i32, args: **char) {
    var address = Address{.street = """tonysparks""", 54, .city = "MKE"}
    //var x = &address
    AnotherFunc(len, args, &address)
    //AnotherFunc1(len, args)//, &address)
    /*var x = 123;
    var y = 4 + 5;
    var z: [2]*const char;*/
    /*
    Test1()
    Test1(4, 5)
    Test1(4)
    Test2(1)
    Test2(1,2,4)
    Test2(1,2)
    TestV(3)
    TestV()
    TestV(1,2,3,4)*/
    //var a = [2]i32{0,1}
    //a[0] = 1 
    //a[1] = "hi"
    /*
    var a = [2]i32{0,1}
    var str = "hi"
    var y = str[0]
    var z = 0
    var x = z[1]*/
    /*
    var z = StructTest{
    //    .stage = true,
        .EmbeddedStruct = EmbeddedStruct {
            .name = "tony",
            .age = 36f,
        }
    }*/
    //var x = z ? y : z
/*
    var i = typeof(:StructTest)
    var x = typeof(:Struct)
    var z = typeof(i)
    var z2 = typeof(w)
    var i = offsetof(StructTest, name)
    var x = offsetof(Struct, name)
    var x = offsetof(StructTest, namex)
    var z = sizeof(:StructTest)
    var y = sizeof(:Struct)
    var w = sizeof(z)
    var w2 = sizeof(z2)
    */
    //var y = x
    //var w = null
    /*var w = true

    var tmp = 2
    const t = 10
    if(true) {
        tmp = "hi" + 2
        var ww:i32 = 2 + "hi"
       // t -= 2
    }*/
/*
    var array:[]i32 = [2]i32{1,2}
    var array2 = [4]i32{5,6,7,8}
    var array3 = [4]i32{15,16,17,18}

    array2 = array3*/
    /*var x = 10
    const y = 2
    var array4 = [2]i32 {
        [0] = 99,
        [true] = 4,
        ["hi"] = 2,
        [x]= 5,
        [y] = 111
    }*/
/*
    var z = 10
    var zz:f32 = z as (void)*/

/*
    var a = [2]i32{1,2}
    var x = 10
    var p = &x
    var pp = &10
    var pp2 = &a*/
    /*
l4:
    goto l2;
    var z:[2]f32 = (1+2)
l2:
    goto l3;
    goto l4*/
}