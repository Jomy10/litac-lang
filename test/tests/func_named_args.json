{
    "description": "Tests Function Named Arguments",
    "enabled": true,
    "program" : `
    @include("assert.h");
    @foreign func assert(e:bool):void;

    @include("stdio.h");
    @foreign func printf(...):void;

    %definitions%

    func main(len:i32, args:**char):i32 {
        %code%
    }
    `,
    "tests": [
        {
            "name" : "Simple Names",
            "definitions": `
                func Test(a: i32, b: i32) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }
                func Test2(a: i32, b: i32, c: i32, d: i32) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    assert(c == 3)
                    assert(d == 4)
                    return b
                }
            `,
            "code": `
                assert(Test(.a = 1, .b = 2) == 2)
                assert(Test(.b = 2, .a = 1) == 2)
                assert(Test(1, .b = 2) == 2)

                assert(Test2(.a = 1, .b = 2, .c = 3, .d = 4) == 2)
                assert(Test2(.c = 3, .d = 4, .a = 1, .b = 2) == 2)
                assert(Test2(.d = 4, .c = 3, .b = 2, .a = 1) == 2)
                assert(Test2(.d = 4, .b = 2, .c = 3, .a = 1) == 2)

                assert(Test2(1, .b = 2, .c = 3, .d = 4) == 2)
                assert(Test2(1, 2, .c = 3, .d = 4) == 2)
                assert(Test2(1, 2, 3, .d = 4) == 2)
                assert(Test2(1, 2, 3, 4) == 2)

                assert(Test2(1, .c = 3, .d = 4, .b = 2) == 2)
                assert(Test2(1, .d = 4, .c = 3, .b = 2) == 2)
                assert(Test2(1, .d = 4, .b = 2, .c = 3) == 2)

                assert(Test2(1, 2, .c = 3, .d = 4) == 2)
                assert(Test2(1, 2, .d = 4, .c = 3) == 2)

                assert(Test2(1, 2, 3, .d = 4) == 2)
            `,
        },

        {
            "name" : "Default Parameters",
            "definitions": `
                func Test(a: i32=1, b: i32=2) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }


                func Test2(a: i32=1, b: i32=2, c: i32=3, d: i32=4) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    assert(c == 3)
                    assert(d == 4)
                    return b
                }

                func Test3(a: i32=1, b: i32=2, c: i32=3, d: i32=4) : i32 {
                    assert(a == 4)
                    assert(b == 3)
                    assert(c == 2)
                    assert(d == 1)
                    return b
                }
            `,
            "code": `
                assert(Test(.a = 1, .b = 2) == 2)
                assert(Test(.b = 2, .a = 1) == 2)
                assert(Test(1, .b = 2) == 2)

                assert(Test(.a = 1) == 2)
                assert(Test(.b = 2) == 2)
                assert(Test() == 2)


                assert(Test2(.a = 1, .b = 2, .c = 3, .d = 4) == 2)
                assert(Test2(.c = 3, .d = 4, .a = 1, .b = 2) == 2)
                assert(Test2(.d = 4, .c = 3, .b = 2, .a = 1) == 2)
                assert(Test2(.d = 4, .b = 2, .c = 3, .a = 1) == 2)

                assert(Test2(.b = 2, .c = 3, .d = 4) == 2)
                assert(Test2(.c = 3, .d = 4) == 2)
                assert(Test2(.d = 4, .c = 3) == 2)
                assert(Test2(.d = 4) == 2)
                assert(Test2() == 2)

                assert(Test2(.c = 3, .d = 4, .b = 2) == 2)
                assert(Test2(.d = 4, .c = 3, .b = 2) == 2)
                assert(Test2(.d = 4, .b = 2, .c = 3) == 2)

                assert(Test2(.d = 4, .b = 2) == 2)
                assert(Test2(.c = 3, .b = 2) == 2)
                assert(Test2(.c = 3, .a = 1) == 2)


                assert(Test3(.a = 4, .b = 3, .c = 2, .d = 1) == 3)
            `,
        },
        {
            "name" : "Invalid Named Parameters Position",
            "definitions": `
                func Test(a: i32, b: i32) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }
            `,
            "code": `
                assert(Test(.a = 1, 2) == 2)
            `,
            "error" : "Named argument specifications must appear after all fixed arguments have been specified"
        },
        {
            "name" : "Invalid Named Parameters Position With Default Arg",
            "definitions": `
                func Test(a: i32=1, b: i32=2) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }
            `,
            "code": `
                assert(Test(.a = 1, 2) == 2)
            `,
            "error" : "Named argument specifications must appear after all fixed arguments have been specified"
        },
        {
            "name" : "Invalid Named Parameters Name With Default Arg",
            "definitions": `
                func Test(a: i32=1, b: i32=2) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }
            `,
            "code": `
                assert(Test(.c = 1) == 2)
            `,
            "error": "Invalid named parameter: 'c'; no parameter with that name found in 'func Test(a: i32, b: i32)'"
        },

        {
            "name" : "Invalid Named Parameters With Func Ptr",
            "definitions": `
                func Test(a: i32=1, b: i32=2) : i32 {
                    assert(a == 1)
                    assert(b == 2)
                    return b
                }


            `,
            "code": `
                var ptr = Test
                ptr(.a = 1, 2)
            `,
            "error": "Named arguments are not allowed on function pointers"
        },
    ]
}