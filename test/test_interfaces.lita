//import "assert"
//import "libc"

/*
trait List {
    size: func() : i32
    add: func(i32) : void
}

struct ArrayList {
    size: i32
}

func (this: *ArrayList) size() : i32 {
    return this.size
}
func (this: *ArrayList) add(item : i32) {
    this.size += item
}


struct ArrayList2 {
    size: i32
}

func (this: *ArrayList2) size() : i32 {
    return this.size
}

var number = 0
func AllocInterface() : List {
    number += 1
    return &ArrayList{}
}

func DoSomething(x: List, item: i32) : i32 {
    printf("List type: %d\n", typeof(x))
    x.add(item)
    return x.size()
}
*/


                trait List {
                    size: func() : i32
                    add:  func(i32) : void
                }

                struct ArrayList<T> {
                    len: i32
                    element: T
                }

                func (this: *ArrayList<T>) size<T>() : i32 {
                    return this.len
                }

                func (this: *ArrayList<T>) add<T>(item : i32) {
                    this.len += item
                }

func main(len:i32, args:**char) : i32 {
//    printf("hello world\n")

    var array = ArrayList<i32>{
        .len = 0,
        .element = 32
    }

    var list: List = &array
    //var list = &array
    list.add(4);
    (list).add(8);
    var plist: *List = &list
    plist.add(4);
    (plist).add(8);

    var array2 = ArrayList<f32>{
        .len = 0,
        .element = 32
    }
    var list2: List = &array2
    list2.add(8);
    (list2.size() == 8);
    (array2.element == 32);
    //assert(list.size() == 4)
    //assert(array.element == 32)

//    var array = ArrayList{}
//    DoSomething(&array, 5)

//    printf("Array type: %d\n", typeof(array))

/*
    // should be valid
    var t1: List = &array
    var tp: *List = &t1
    var ty: List = t1


    var array2 = ArrayList2{}
    var tx: List = &array2
*/
    //var xx: List = ArrayList{}

    /*array = ty
    array = &ty

    var array2: *ArrayList = &array

    array2 = ty
    array2 = &ty*/

    // should be invalid
    //var tp1: *List = &array
    //var t: List = array
    //var tp2: *List = array


    /*var n = DoSomething(array, 4)
    printf("n: %d\n", n)

    var size = AllocInterface().size();
    printf("Size: %d\n", size)*/

    return 0
}