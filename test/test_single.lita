import "assert"
/*
TODO: Duplicate using member
struct Vec {
    x: f32
    y: f32
}
struct Entity {
    pos: using Vec
    x: i32
}

func main(len:i32, args:**char) : i32 {
    assert(false)
}*/

 //@include("<string.h>");
//@foreign func strcmp(a:*const char, b:*const char) : i32;

/*
func test(a:*Map) : i32 {
    a = &Map{4}
    return a.a;
}*/

@include("<string.h>");
@foreign func strcmp(a:*const char, b:*const char) : i32;

@asStr("ToStr2")
enum Test {
    A,
    B
}

#precheck
emitClear()
emit("
func something() : i32 {
    return 4;
}

")
addDeclaration("../test/test_single.lita", emitStr())
#end

func main(len:i32, args:**char) : i32 {
    assert(Test.A == 0)
    assert(strcmp(ToStr2(Test.A), "A") == 0)
    assert(strcmp(ToStr2(Test.B), "B") == 0)
}